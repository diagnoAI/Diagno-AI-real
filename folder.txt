i have created my React app using vite.js

by -> npm create@latest
folder or project name :frontend
then selected react>javascript
then cd frontend
npm install
npm run dev

then i working with this folder strucutre
Public folder has some images 
node_modules has some dependices
Now src folder which i was created many files 
in src folder , i created component folder ðŸ“‚ then in the component folder i had created components and CSS are created in styles folder

from start:
src -> components -> Navbar.jsx:
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Stethoscope, User, Menu } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { clsx } from 'clsx';
import '../styles/Navbar.css';

export function Navbar() {
  const { isAuthenticated, user, logout } = useAuth();
  const location = useLocation();
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const navLinks = [
    { path: '/', label: 'Home' },
    { path: '/features', label: 'Features' },
    { path: '/workflow', label: 'Workflow' },
    { path: '/about', label: 'About' },
    { path: '/contact', label: 'Contact' },
  ];

  const toggleDropdown = () => setIsDropdownOpen((prev) => !prev);
  const closeDropdown = () => setIsDropdownOpen(false);
  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen);
  const closeMobileMenu = () => setIsMobileMenuOpen(false);

  return (
    <nav className="navbar">
      <div className="navbar-container">
        <div className="navbar-content">
          {/* Logo on Left */}
          <Link to="/" className="navbar-logo" onClick={()=>{closeDropdown(); closeMobileMenu();}}>
            <Stethoscope className="navbar-logo-icon" />
            <span className="navbar-logo-text">Diagno AI</span>
          </Link>

          {/* Desktop Nav Links */}
          <div className="navbar-links md:flex hidden">
            {navLinks.map((link) => (
              <Link
                key={link.path}
                to={link.path}
                className={clsx('nav-link', {
                  'active': location.pathname === link.path,
                })}
              >
                {link.label}
                {location.pathname === link.path && (
                  <motion.div
                    layoutId="navbar-indicator"
                    className="navbar-indicator"
                    initial={false}
                    transition={{ type: 'spring', stiffness: 500, damping: 30 }}
                  />
                )}
              </Link>
            ))}
          </div>

          {/* Right Side: User Icon + Hamburger */}
          <div className="navbar-right">
            <div className="navbar-auth">
              {isAuthenticated ? (
                <div className="navbar-user">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    className="navbar-user-button"
                    onClick={toggleDropdown}
                  >
                    {user?.profileImage ? (
                      <img
                        src={user.profileImage}
                        alt={user.name}
                        className="navbar-user-image"
                      />
                    ) : (
                      <User className="navbar-user-icon" />
                    )}
                  </motion.button>
                  <div
                    className={clsx('navbar-dropdown', {
                      'navbar-dropdown-open': isDropdownOpen,
                    })}
                  >
                    <Link
                      to="/dashboard"
                      className="navbar-dropdown-item hover:bg-gray-100"
                      onClick={closeDropdown}
                    >
                      Dashboard
                    </Link>
                    <button
                      onClick={() => {
                        logout();
                        closeDropdown();
                      }}
                      className="navbar-dropdown-button hover:bg-gray-100"
                    >
                      Logout
                    </button>
                  </div>
                </div>
              ) : (
                <Link
                  to="/login"
                  className="navbar-login hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={closeMobileMenu}
                >
                  Login
                </Link>
              )}
            </div>

            {/* Single Hamburger Button */}
            <button
              className="navbar-hamburger md:hidden"
              onClick={toggleMobileMenu}
            >
              <Menu className="navbar-hamburger-icon" />
            </button>
          </div>

          {/* Mobile Menu */}
          {isMobileMenuOpen && (
            <div className="navbar-mobile-menu md:hidden">
              {navLinks.map((link) => (
                <Link
                  key={link.path}
                  to={link.path}
                  className="navbar-mobile-link"
                  onClick={closeMobileMenu}
                >
                  {link.label}
                </Link>
              ))}
            </div>
          )}
        </div>
      </div>
    </nav>
  );
}

src -> styles -> Navbar.css:
.navbar {
  position: fixed;
  width: 100%;
  backdrop-filter: blur(8px);
  background: rgba(255, 255, 255, 0.75);
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  z-index: 50;
}

.navbar-container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 1rem;
}

.navbar-content {
  display: flex;
  justify-content: space-between;
  height: 4rem;
  align-items: center;
  position: relative;
}

.navbar-logo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  text-decoration: none;
}

.navbar-logo-icon {
  height: 2rem;
  width: 2rem;
  color: #2563eb;
}

.navbar-logo-text {
  font-size: 1.25rem;
  font-weight: bold;
  background: linear-gradient(to right, #2563eb, #06b6d4);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.navbar-right {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.navbar-hamburger {
  display: none;
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
}

.navbar-hamburger-icon {
  height: 1.5rem;
  width: 1.5rem;
  color: #2563eb;
}

.navbar-links {
  display: none;
  align-items: center;
  gap: 2rem;
}

.nav-link {
  position: relative;
  padding: 0.5rem 0;
  color: #4b5563;
  transition: color 0.2s ease;
  text-decoration: none;
}

.nav-link:hover {
  color: #2563eb;
}

.nav-link.active {
  color: #2563eb;
}

.navbar-indicator {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: #2563eb;
}

.navbar-mobile-menu {
  position: absolute;
  top: 4rem;
  left: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  z-index: 40;
}

.navbar-mobile-link {
  padding: 0.5rem 1rem;
  color: #4b5563;
  text-decoration: none;
  font-size: 1rem;
}

.navbar-mobile-link:hover {
  color: #2563eb;
}

.navbar-auth {
  display: flex;
  align-items: center;
}

.navbar-user {
  position: relative;
}

.navbar-user-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: #eff6ff;
  border-radius: 9999px;
  padding: 0.5rem;
  border: none;
  cursor: pointer;
}

.navbar-user-image {
  height: 2rem;
  width: 2rem;
  border-radius: 9999px;
  object-fit: cover;
}

.navbar-user-icon {
  height: 1.5rem;
  width: 1.5rem;
  color: #2563eb;
}

.navbar-dropdown {
  position: absolute;
  right: 0;
  margin-top: 0.5rem;
  width: 12rem;
  background: white;
  border-radius: 0.375rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 0.25rem 0;
  display: none; /* Hidden by default */
}

.navbar-dropdown-open {
  display: block; /* Show only when isDropdownOpen is true */
}

.navbar-dropdown-item {
  display: block;
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  color: #374151;
  text-decoration: none;
}

.navbar-dropdown-button {
  display: block;
  width: 100%;
  text-align: left;
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  color: #374151;
  border: none;
  background: none;
  cursor: pointer;
}

.navbar-login {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  border: none;
  font-size: 0.875rem;
  font-weight: 500;
  border-radius: 0.375rem;
  color: white;
  background: #2563eb;
  text-decoration: none;
}

@media (max-width: 768px) {
  .navbar-hamburger {
    display: block;
  }

  .navbar-links {
    display: none;
  }

  .navbar-mobile-menu {
    display: flex;
  }

  .navbar-content {
    flex-wrap: nowrap;
  }

  .navbar-right {
    justify-content: flex-end;
  }
}

@media (min-width: 769px) {
  .navbar-links {
    display: flex;
  }

  .navbar-hamburger {
    display: none;
  }

  .navbar-mobile-menu {
    display: none;
  }
}

src -> components -> Hero.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { Brain } from 'lucide-react';
import '../styles/Hero.css';

export function Hero() {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  const handleGetStarted = () => {
    if (isAuthenticated) {
      navigate('/dashboard');
    } else {
      navigate('/login');
    }
  };

  return (
    <div className="hero">
      {/* Background with gradient */}
      <div className="hero-background" />
      
      {/* Content */}
      <div className="hero-container">
        <div className="hero-content">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <Brain className="hero-icon" />
            <h1 className="hero-title">
              Welcome to{' '}
              <span className="hero-title-highlight">
                Diagno AI
              </span>
            </h1>
            <p className="hero-description">
              Empowering doctors with AI-powered diagnostics. Upload CT scans and get instant, accurate analysis to support your medical decisions.
            </p>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleGetStarted}
              className="hero-button hover:bg-blue-700"
            >
              {isAuthenticated ? 'Go to Dashboard' : 'Get Started'}
            </motion.button>
          </motion.div>
        </div>
      </div>
    </div>
  );
}

src -> styles -> Hero.css
.hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
  }
  
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom right, #eff6ff, #ffffff, #ecfeff);
  }
  
  .hero-container {
    position: relative;
    max-width: 1280px;
    margin: 0 auto;
    padding: 8rem 1rem;
  }
  
  .hero-content {
    text-align: center;
  }
  
  .hero-icon {
    height: 4rem;
    width: 4rem;
    margin: 0 auto 2rem;
    color: #2563eb;
  }
  
  .hero-title {
    font-size: 2.25rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 2rem;
  }
  
  .hero-title-highlight {
    background: linear-gradient(to right, #2563eb, #06b6d4);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }
  
  .hero-description {
    max-width: 32rem;
    margin: 0 auto 2.5rem;
    font-size: 1.25rem;
    color: #4b5563;
  }
  
  .hero-button {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 2rem;
    border: none;
    font-size: 1rem;
    font-weight: 500;
    border-radius: 9999px;
    color: white;
    background: #2563eb;
    cursor: pointer;
  }
  
  /* Responsive adjustments */
  @media (min-width: 640px) {
    .hero-title {
      font-size: 3.75rem;
    }
  
    .hero-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .hero-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  
    .hero-button {
      padding: 1rem 2.5rem;
      font-size: 1.125rem;
    }
  }

src -> components -> Features.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import { Brain, Clock, Shield, Stethoscope } from 'lucide-react';
import '../styles/Features.css'

const features = [
  {
    icon: Brain,
    title: 'AI-Powered Analysis',
    description: 'Advanced machine learning algorithms provide accurate and rapid analysis of CT scan images.',
  },
  {
    icon: Clock,
    title: 'Instant Results',
    description: 'Get detailed diagnostic reports within seconds, helping you make faster medical decisions.',
  },
  {
    icon: Shield,
    title: 'Secure & Compliant',
    description: 'Your data is protected with enterprise-grade security, ensuring HIPAA compliance.',
  },
  {
    icon: Stethoscope,
    title: 'Doctor-Centric Design',
    description: 'Interface designed specifically for medical professionals, streamlining your workflow.',
  },
];

export function Features() {
  return (
    <section id="features" className="features">
      <div className="features-container">
        <div className="features-header">
          <motion.h2 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="features-title"
          >
            Powerful Features for Medical Professionals
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="features-subtitle"
          >
            Everything you need to enhance your diagnostic capabilities
          </motion.p>
        </div>

        <div className="features-grid">
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="feature-card glass hover:shadow-xl"
            >
              <div className="feature-icon-container">
                <feature.icon className="feature-icon" />
              </div>
              <h3 className="feature-title">
                {feature.title}
              </h3>
              <p className="feature-description">
                {feature.description}
              </p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

src -> styles -> Features.css
.features {
    padding: 6rem 0;
    background: linear-gradient(to bottom, #ffffff, #eff6ff);
  }
  
  .features-container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .features-header {
    text-align: center;
  }
  
  .features-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .features-subtitle {
    font-size: 1.25rem;
    color: #4b5563;
    margin-bottom: 4rem;
  }
  
  .features-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .feature-card {
    border-radius: 0.75rem;
    padding: 1.5rem;
    transition: box-shadow 0.2s ease;
  }
  
  .feature-icon-container {
    height: 3rem;
    width: 3rem;
    border-radius: 0.5rem;
    background: #dbeafe;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
  }
  
  .feature-icon {
    height: 1.5rem;
    width: 1.5rem;
    color: #2563eb;
  }
  
  .feature-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.5rem;
    text-align: center;
  }
  
  .feature-description {
    color: #4b5563;
    text-align: center;
  }
  
  /* Responsive adjustments */
  @media (min-width: 640px) {
    .features-title {
      font-size: 2.25rem;
    }
  
    .features-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 768px) {
    .features-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    .features-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  
    .features-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

src -> components -> Workflow.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import { Upload, Search, FileText } from 'lucide-react';
import '../styles/Workflow.css';

const steps = [
  {
    icon: Upload,
    title: 'Upload CT Scan',
    description: 'Simply upload your patient\'s CT scan images through our secure interface.',
  },
  {
    icon: Search,
    title: 'AI Analysis',
    description: 'Our advanced AI algorithms analyze the images with high precision.',
  },
  {
    icon: FileText,
    title: 'Get Results',
    description: 'Receive detailed diagnostic reports with highlighted areas of interest.',
  },
];

export function Workflow() {
  return (
    <section id="workflow" className="workflow">
      <div className="workflow-container">
        <div className="workflow-header">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }} // Changed from whileInView
            transition={{ duration: 0.5 }}
            className="workflow-title"
          >
            How It Works
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }} // Changed from whileInView
            transition={{ duration: 0.5, delay: 0.2 }}
            className="workflow-subtitle"
          >
            Three simple steps to enhance your diagnostic process
          </motion.p>
        </div>

        <div className="workflow-grid">
          {steps.map((step, index) => (
            <motion.div
              key={step.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }} // Changed from whileInView
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="workflow-step"
            >
              <div className="workflow-card glass">
                <div className="workflow-icon-container">
                  <step.icon className="workflow-icon" />
                </div>
                <h3 className="workflow-step-title">{step.title}</h3>
                <p className="workflow-step-description">{step.description}</p>
              </div>
              {index < steps.length - 1 && (
                <div className="workflow-connector md:block" />
              )}
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

src -> styles -> Workflow.css
.workflow {
    padding: 6rem 0;
    background: #ffffff;
  }
  
  .workflow-container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .workflow-header {
    text-align: center;
  }
  
  .workflow-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .workflow-subtitle {
    font-size: 1.25rem;
    color: #4b5563;
    margin-bottom: 4rem;
  }
  
  .workflow-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .workflow-step {
    position: relative;
  }
  
  .workflow-card {
    border-radius: 0.75rem;
    padding: 2rem;
    text-align: center;
    position: relative;
    z-index: 10;
  }
  
  .workflow-icon-container {
    height: 4rem;
    width: 4rem;
    border-radius: 9999px;
    background: #dbeafe;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
  }
  
  .workflow-icon {
    height: 2rem;
    width: 2rem;
    color: #2563eb;
  }
  
  .workflow-step-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .workflow-step-description {
    color: #4b5563;
  }
  
  .workflow-connector {
    display: none;
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateX(50%) translateY(-50%);
    width: 4rem;
    height: 2px;
    background: #bfdbfe;
  }
  
  /* Responsive adjustments */
  @media (min-width: 640px) {
    .workflow-title {
      font-size: 2.25rem;
    }
  
    .workflow-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 768px) {
    .workflow-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  
    .md\:block {
      display: block;
    }
  }
  
  @media (min-width: 1024px) {
    .workflow-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

src -> components -> About.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import '../styles/About.css';

export function About() {
  return (
    <section id="about" className="about">
      <div className="about-container">
        <div className="about-grid">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="about-text"
          >
            <h2 className="about-title">
              About Diagno AI
            </h2>
            <div className="about-content">
              <p className="about-paragraph">
                Diagno AI was founded with a mission to revolutionize medical diagnostics through artificial intelligence. Our team of medical professionals and AI experts work together to create cutting-edge solutions that enhance diagnostic accuracy and efficiency.
              </p>
              <p className="about-paragraph">
                We understand the challenges healthcare providers face in delivering timely and accurate diagnoses. That's why we've developed an advanced AI-powered platform that assists medical professionals in analyzing CT scans with unprecedented precision.
              </p>
              <p className="about-paragraph">
                Our commitment to innovation, accuracy, and patient care drives us to continuously improve our technology, making it an indispensable tool for modern healthcare practitioners.
              </p>
            </div>
          </motion.div>
          
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="about-image-wrapper"
          >
            <div className="about-image-container">
              <img
                src="https://images.unsplash.com/photo-1576091160399-112ba8d25d1d?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80"
                alt="Medical professionals using technology"
                className="about-image"
              />
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
}

src -> styles -> About.css
.about {
    padding: 6rem 0;
    background: linear-gradient(to bottom, #eff6ff, #ffffff);
  }
  
  .about-container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .about-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    align-items: center;
  }
  
  /* .about-text { */
    /* No additional styles needed here beyond motion props */
  /* } */
  
  .about-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1.5rem;
  }
  
  .about-content {
    color: #4b5563;
    font-size: 1.125rem;
    line-height: 1.75rem;
  }
  
  .about-paragraph {
    margin-bottom: 1rem;
  }
  
  .about-paragraph:last-child {
    margin-bottom: 0;
  }
  
  .about-image-wrapper {
    position: relative;
  }
  
  .about-image-container {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 aspect ratio (9/16 = 0.5625) */
    border-radius: 0.75rem;
    overflow: hidden;
  }
  
  .about-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Responsive adjustments */
  @media (min-width: 640px) {
    .about-title {
      font-size: 2.25rem;
    }
  
    .about-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .about-grid {
      grid-template-columns: 1fr 1fr;
    }
  
    .about-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

src -> components -> Contact.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import { Mail, Phone, MapPin } from 'lucide-react';
import '../styles/Contact.css';

export function Contact() {
  return (
    <section id="contact" className="contact">
      <div className="contact-container">
        <div className="contact-header">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="contact-title"
          >
            Get in Touch
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="contact-subtitle"
          >
            Have questions? We're here to help.
          </motion.p>
        </div>

        <div className="contact-grid">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="contact-form-container glass"
          >
            <form className="contact-form">
              <div className="form-group">
                <label htmlFor="name" className="form-label">
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  className="form-input focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div className="form-group">
                <label htmlFor="email" className="form-label">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="form-input focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div className="form-group">
                <label htmlFor="message" className="form-label">
                  Message
                </label>
                <textarea
                  id="message"
                  rows={4}
                  className="form-textarea focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <button
                type="submit"
                className="form-submit hover:bg-blue-700"
              >
                Send Message
              </button>
            </form>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 20 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="contact-info"
          >
            <div className="contact-item">
              <Mail className="contact-icon" />
              <div>
                <h3 className="contact-item-title">Email</h3>
                <p className="contact-item-text">diagnoai@gmail.com</p>
              </div>
            </div>
            <div className="contact-item">
              <Phone className="contact-icon" />
              <div>
                <h3 className="contact-item-title">Phone</h3>
                <p className="contact-item-text">9344422588</p>
              </div>
            </div>
            <div className="contact-item">
              <MapPin className="contact-icon" />
              <div>
                <h3 className="contact-item-title">Address</h3>
                <p className="contact-item-text">
                  Sadakathulla Appa College<br />
                  Tirunelveli, Tamil Nadu, India - 627008 
                </p>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
}

src -> styles -> Contact.css
.contact {
    padding: 6rem 0;
    background: #ffffff;
  }
  
  .contact-container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .contact-header {
    text-align: center;
    margin-bottom: 4rem;
  }
  
  .contact-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .contact-subtitle {
    font-size: 1.25rem;
    color: #4b5563;
  }
  
  .contact-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
  }
  
  .contact-form-container {
    border-radius: 0.75rem;
    padding: 2rem;
  }
  
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  /* .form-group { */
    /* No additional styles needed here */
  /* } */
  
  .form-label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
  }
  
  .form-input,
  .form-textarea {
    margin-top: 0.25rem;
    display: block;
    width: 100%;
    border-radius: 0.375rem;
    border: 1px solid #d1d5db;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    padding: 0.5rem 0.75rem;
  }
  
  .form-textarea {
    resize: vertical;
  }
  
  .form-submit {
    width: 100%;
    background: #2563eb;
    color: white;
    border-radius: 0.375rem;
    padding: 0.5rem 1rem;
    border: none;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .contact-info {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .contact-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .contact-icon {
    height: 1.5rem;
    width: 1.5rem;
    color: #2563eb;
    margin-top: 0.25rem;
  }
  
  .contact-item-title {
    font-size: 1.125rem;
    font-weight: 500;
    color: #111827;
  }
  
  .contact-item-text {
    color: #4b5563;
  }
  
  /* Responsive adjustments */
  @media (min-width: 640px) {
    .contact-title {
      font-size: 2.25rem;
    }
  
    .contact-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .contact-grid {
      grid-template-columns: 1fr 1fr;
    }
  
    .contact-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

src -> components -> Sidebar.jsx:
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { User, Upload, FileText, Settings, LogOut, Menu, Home, ArrowLeft } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import '../styles/Sidebar.css';

export function Sidebar({ onToggle }) {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [isCollapsed, setIsCollapsed] = useState(false);

  useEffect(() => {
    if (onToggle) {
      onToggle(isCollapsed);
    }
  }, [isCollapsed, onToggle]);

  const toggleSidebar = () => setIsCollapsed(!isCollapsed);

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  return (
    <div className={`sidebar ${isCollapsed ? 'collapsed' : ''}`}>
      <div className="sidebar-header">
        <div className="sidebar-header-left">
          <button
            className="hover:bg-gray-100 sidebar-back-button"
            onClick={() => navigate('/')}
          >
            <ArrowLeft className="sidebar-back-icon" />
          </button>
          {!isCollapsed && <h4 className="h4">HOME</h4>}
        </div>
        <button
          className="hover:bg-gray-100 sidebar-toggle-button"
          onClick={toggleSidebar}
        >
          <Menu className="sidebar-toggle-icon" />
        </button>
      </div>
      <div className="sidebar-profile">
        <img
          src={user?.profileImage || '/default-profile.png'}
          alt={user?.name}
          className="sidebar-profile-image"
        />
        {!isCollapsed && <h3 className="sidebar-profile-name">Dr. {user?.name}</h3>}
      </div>
      <nav className="sidebar-links">
        <Link to="/dashboard" className="sidebar-link">
          <div className="tooltip-wrapper">
            <Home className="sidebar-icon" />
            {isCollapsed && <span className="tooltip">Dashboard</span>}
            {!isCollapsed && 'Dashboard'}
          </div>
        </Link>
        <Link to="/dashboard/profile" className="sidebar-link">
          <div className="tooltip-wrapper">
            <User className="sidebar-icon" />
            {isCollapsed && <span className="tooltip">Profile</span>}
            {!isCollapsed && 'Profile'}
          </div>
        </Link>
        <Link to="/dashboard/upload" className="sidebar-link">
          <div className="tooltip-wrapper">
            <Upload className="sidebar-icon" />
            {isCollapsed && <span className="tooltip">Upload</span>}
            {!isCollapsed && 'Upload'}
          </div>
        </Link>
        <Link to="/dashboard/report-retrieve" className="sidebar-link">
          <div className="tooltip-wrapper">
            <FileText className="sidebar-icon" />
            {isCollapsed && <span className="tooltip">Report Retrieve</span>}
            {!isCollapsed && 'Report Retrieve'}
          </div>
        </Link>
        <Link to="/dashboard/settings" className="sidebar-link">
          <div className="tooltip-wrapper">
            <Settings className="sidebar-icon" />
            {isCollapsed && <span className="tooltip">Settings</span>}
            {!isCollapsed && 'Settings'}
          </div>
        </Link>
        <button onClick={handleLogout} className="sidebar-link sidebar-logout">
          <div className="tooltip-wrapper">
            <LogOut className="sidebar-icon" />
            {isCollapsed && <span className="tooltip">Logout</span>}
            {!isCollapsed && 'Logout'}
          </div>
        </button>
      </nav>
    </div>
  );
}

src -> styles -> Sidebar.css
.sidebar {
  width: 16rem;
  background: rgba(37, 99, 235, 0.1);
  backdrop-filter: blur(8px);
  border-right: 1px solid rgba(255, 255, 255, 0.2);
  padding: 2rem 1rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);
  transition: width 0.3s ease;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 50;
}

.sidebar.collapsed {
  width: 4rem;
  padding: 1rem 0;
  align-items: center;
}

.sidebar-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.sidebar.collapsed .sidebar-header {
  flex-direction: column; /* Stack buttons vertically in collapsed state */
  gap: 1rem; /* Add space between back button and hamburger button */
  align-items: center; /* Center both buttons */
}

.sidebar-header-left {
  display: flex;
  align-items: center;
  gap: 1rem; /* Space between back button and h4 */
}

.sidebar-back-button {
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.sidebar-back-icon {
  width: 1.5rem;
  height: 1.5rem;
  color: #2563eb;
}

.sidebar-toggle-button {
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.sidebar-toggle-icon {
  width: 1.5rem;
  height: 1.5rem;
  color: #2563eb;
}

.sidebar-profile {
  text-align: center;
}

.sidebar-profile-image {
  width: 4rem;
  height: 4rem;
  border-radius: 9999px;
  object-fit: cover;
  margin: 0 auto;
  transition: width 0.3s ease, height 0.3s ease;
}

.sidebar.collapsed .sidebar-profile-image {
  width: 2rem;
  height: 2rem;
}

.sidebar-profile-name {
  font-size: 1.25rem;
  font-weight: 600;
  color: #111827;
  margin-top: 1rem;
}

.sidebar.collapsed .sidebar-profile-name {
  display: none;
}

.dashboard-page.dark .sidebar-profile-name {
  color: #ffffff;
}

.sidebar-links {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  width: 100%;
}

.sidebar-link {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  color: #4b5563;
  text-decoration: none;
  transition: background-color 0.2s ease;
}

.sidebar.collapsed .sidebar-link {
  padding: 0.75rem 0;
  justify-content: center;
}

.sidebar-link:hover {
  background: rgba(255, 255, 255, 0.2);
  color: #2563eb;
}

.dashboard-page.dark .sidebar-link {
  color: #d1d5db;
}

.dashboard-page.dark .sidebar-link:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #ffffff;
}

.sidebar-icon {
  width: 1.25rem;
  height: 1.25rem;
}

.sidebar-logout {
  background: none;
  border: none;
  cursor: pointer;
}

.tooltip-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.tooltip {
  position: absolute;
  left: 100%;
  top: 50%;
  transform: translateY(-50%);
  background: #2563eb;
  color: #ffffff;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  white-space: nowrap;
  display: none;
}

.sidebar.collapsed .sidebar-link:hover .tooltip {
  display: block;
}

.h4 {
  font-size: 1rem;
  font-weight: 600;
  color: #111827;
  margin: 0; /* Remove default margin for better alignment */
}

.dashboard-page.dark .h4 {
  color: #ffffff;
}

/* Dark Mode Adjustments */
.dashboard-page.dark .sidebar {
  background: rgba(37, 99, 235, 0.05);
  border-right: 1px solid rgba(255, 255, 255, 0.1);
}

src -> components -> Bottombar.jsx:
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Home, Plus, FileText, User } from 'lucide-react';
import '../styles/BottomBar.css';

export function BottomBar() {
  const [activeTooltip, setActiveTooltip] = useState(null);
  const [timeoutId, setTimeoutId] = useState(null);
  const location = useLocation();

  const handleIconClick = (tooltip) => {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    const newTooltip = activeTooltip === tooltip ? null : tooltip;
    setActiveTooltip(newTooltip);

    if (newTooltip) {
      const id = setTimeout(() => {
        setActiveTooltip(null);
      }, 2000);
      setTimeoutId(id);
    }
  };

  useEffect(() => {
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [timeoutId]);

  return (
    <div className="bottom-bar">
      <div className="bottom-bar-item-wrapper">
        <Link
          to="/dashboard"
          className={`bottom-bar-item ${location.pathname === '/dashboard' ? 'active' : ''}`}
          onClick={() => handleIconClick('dashboard')}
        >
          <Home className="bottom-bar-icon" />
          {activeTooltip === 'dashboard' && (
            <span className="bottom-bar-tooltip">Dashboard</span>
          )}
        </Link>
      </div>
      <div className="bottom-bar-item-wrapper">
        <Link
          to="/dashboard/upload"
          className={`bottom-bar-item ${location.pathname === '/dashboard/upload' ? 'active' : ''}`}
          onClick={() => handleIconClick('upload')}
        >
          <Plus className="bottom-bar-icon" />
          {activeTooltip === 'upload' && (
            <span className="bottom-bar-tooltip">Upload</span>
          )}
        </Link>
      </div>
      <div className="bottom-bar-item-wrapper">
        <Link
          to="/dashboard/report-retrieve"
          className={`bottom-bar-item ${location.pathname === '/dashboard/report-retrieve' ? 'active' : ''}`}
          onClick={() => handleIconClick('report-retrieve')}
        >
          <FileText className="bottom-bar-icon" />
          {activeTooltip === 'report-retrieve' && (
            <span className="bottom-bar-tooltip">Report Retrieve</span>
          )}
        </Link>
      </div>
      <div className="bottom-bar-item-wrapper">
        <Link
          to="/dashboard/profile"
          className={`bottom-bar-item ${location.pathname === '/dashboard/profile' ? 'active' : ''}`}
          onClick={() => handleIconClick('profile')}
        >
          <User className="bottom-bar-icon" />
          {activeTooltip === 'profile' && (
            <span className="bottom-bar-tooltip">Profile</span>
          )}
        </Link>
      </div>
    </div>
  );
}

src -> styles -> Bottombar.css
.bottom-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: #ffffff;
    box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-around;
    padding: 0.5rem 0;
    z-index: 100;
  }
  
  .bottom-bar-item-wrapper {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .bottom-bar-item {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0.5rem;
    color: #4b5563;
    text-decoration: none;
  }
  
  .bottom-bar-item:hover {
    color: #2563eb;
  }
  
  .bottom-bar-item.active {
    color: #2563eb; /* Highlight the active route */
  }
  
  .bottom-bar-icon {
    width: 1.5rem;
    height: 1.5rem;
  }
  
  /* Tooltip Styles */
  .bottom-bar-tooltip {
    position: absolute;
    bottom: 100%;
    margin-bottom: 0.5rem;
    background: #2563eb;
    color: #ffffff;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    white-space: nowrap;
    z-index: 101;
  }
  
  /* Dark Mode */
  .bottom-bar.dark {
    background: #1f2937;
  }
  
  .bottom-bar.dark .bottom-bar-item {
    color: #d1d5db;
  }
  
  .bottom-bar.dark .bottom-bar-item:hover {
    color: #ffffff;
  }
  
  .bottom-bar.dark .bottom-bar-item.active {
    color: #ffffff; /* Highlight the active route in dark mode */
  }
  
  .bottom-bar.dark .bottom-bar-tooltip {
    background: #1f2937;
    color: #ffffff;
    border: 1px solid #d1d5db;
  }
  
  /* Hover Support for Desktop */
  @media (min-width: 769px) {
    .bottom-bar-item-wrapper:hover .bottom-bar-tooltip {
      display: block;
    }
  
    .bottom-bar-tooltip {
      display: none;
    }
  }

src -> components -> WelcomeScreen.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import '../styles/WelcomeScreen.css';

export function WelcomeScreen({ name, onClose }) {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="welcome-screen"
      onClick={onClose}
    >
      <div className="welcome-content glass">
        <h2 className="welcome-title">Welcome Dr. {name}</h2>
        <p className="welcome-text">Tap anywhere to continue</p>
      </div>
    </motion.div>
  );
}

src -> styles -> WelcomeScreen.css
.workflow {
    padding: 6rem 0;
    background: #ffffff;
  }
  
  .workflow-container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .workflow-header {
    text-align: center;
  }
  
  .workflow-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .workflow-subtitle {
    font-size: 1.25rem;
    color: #4b5563;
    margin-bottom: 4rem;
  }
  
  .workflow-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .workflow-step {
    position: relative;
  }
  
  .workflow-card {
    border-radius: 0.75rem;
    padding: 2rem;
    text-align: center;
    position: relative;
    z-index: 10;
  }
  
  .workflow-icon-container {
    height: 4rem;
    width: 4rem;
    border-radius: 9999px;
    background: #dbeafe;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
  }
  
  .workflow-icon {
    height: 2rem;
    width: 2rem;
    color: #2563eb;
  }
  
  .workflow-step-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .workflow-step-description {
    color: #4b5563;
  }
  
  .workflow-connector {
    display: none;
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateX(50%) translateY(-50%);
    width: 4rem;
    height: 2px;
    background: #bfdbfe;
  }
  
  /* Responsive adjustments */
  @media (min-width: 640px) {
    .workflow-title {
      font-size: 2.25rem;
    }
  
    .workflow-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
  
  @media (min-width: 768px) {
    .workflow-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  
    .md\:block {
      display: block;
    }
  }
  
  @media (min-width: 1024px) {
    .workflow-container {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }



src -> components -> AnalyzingAnimation.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import '../styles/AnalyzingAnimation.css';

export function AnalyzingAnimation() {
  return (
    <div className="analyzing-animation">
      <motion.div
        className="analyzing-circle"
        animate={{ rotate: 360 }}
        transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
      />
      <p className="analyzing-text">Analyzing CT Scan...</p>
    </div>
  );
}

src -> styles -> AnalyzingAnimation.css
.analyzing-animation {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background: linear-gradient(to bottom right, #eff6ff, #ffffff, #ecfeff);
  }
  
  .analyzing-circle {
    width: 100px;
    height: 100px;
    border: 10px solid #2563eb;
    border-top: 10px solid transparent;
    border-radius: 50%;
  }
  
  .analyzing-text {
    margin-top: 20px;
    font-size: 1.5rem;
    color: #111827;
  }

src -> context -> AuthContext.jsx:
import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [isDarkMode, setIsDarkMode] = useState(false);

  const login = async ({ email, password }) => {
    setUser({ email, isVerified: true });
  };

  const signup = async ({ email, password, name }) => {
    setUser({ email,password, name, isVerified: false });
  };

  const verifyOTP = async (otp) => {
    setUser((prev) => ({ ...prev, isVerified: true }));
  };

  const updateProfile = async ({ name, hospital, profileImage }) => {
    setUser((prev) => ({
      ...prev,
      name: name || prev.name,
      hospital: hospital || prev.hospital,
      profileImage: profileImage instanceof File ? URL.createObjectURL(profileImage) : profileImage || prev.profileImage,

    }));
  };
  const logout = () => {
    setUser(null); // Clear user data
    // No need to store email/password here; they're local to Login
  };

  const toggleDarkMode = () => setIsDarkMode((prev) => !prev);

  return (
    <AuthContext.Provider
      value={{ user, isAuthenticated: !!user?.isVerified, login, signup, verifyOTP, updateProfile, logout, isDarkMode, toggleDarkMode }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}
