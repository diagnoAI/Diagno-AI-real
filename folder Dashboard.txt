the Dashboard contents are stored in this folder pages code given below 
the folder name called Dashboard which is under src folder -> pages folder -> Dashboard folder

this components pages are use in Dashboard sections

src -> pages -> Dashboard -> DashboardHome.jsx:
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Users, FileText, HeartPulse, Activity, Calendar, Stethoscope } from 'lucide-react';
import { Line, Pie } from 'react-chartjs-2';
import { useAuth } from '../../context/AuthContext';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler,
} from 'chart.js';
import './DashboardHome.css';

// Register Chart.js components, including Filler
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
);

// Detection Progress Circle
const DetectionProgress = ({ percentage }) => (
  <div className="relative w-12 h-12">
    <svg className="w-full h-full" viewBox="0 0 36 36">
      <path
        className="text-blue-100"
        fill="none"
        strokeWidth="3"
        stroke="currentColor"
        d="M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831"
      />
      <path
        className="text-blue-600"
        fill="none"
        strokeWidth="3"
        strokeDasharray={`${percentage}, 100`}
        stroke="currentColor"
        d="M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831"
      />
    </svg>
    <div className="absolute inset-0 flex items-center justify-center">
      <span className="text-xs font-medium text-blue-900">{percentage}%</span>
    </div>
  </div>
);

// Initial stats data with tooltip text
const initialStats = [
  { label: 'Patients Today', value: 32, icon: Users, color: 'blue-600', tooltip: 'Patients seen today' },
  { label: 'Kidney Stone Scans', value: 15, icon: FileText, color: 'blue-500', tooltip: 'Scans performed today' },
  { label: 'Detection Accuracy', value: 92, icon: HeartPulse, color: 'blue-600', isProgress: true, tooltip: 'Accuracy of detection model' },
  { label: 'High Risk Patients', value: 8, icon: Activity, color: 'blue-500', tooltip: 'Patients at high risk' },
  { label: 'Appointments', value: 10, icon: Calendar, color: 'blue-400', tooltip: 'Scheduled appointments' },
];

// Quick stats data
const quickStats = [
  { label: 'Total Scans (Month)', value: 245 },
  { label: 'Avg. Risk Score', value: '7.8' },
];

// Recent activity data
const recentActivity = [
  { id: 1, action: 'Scan Completed', patient: 'John Doe', time: '10:30 AM' },
  { id: 2, action: 'High Risk Detected', patient: 'Jane Smith', time: '9:15 AM' },
  { id: 3, action: 'Appointment Scheduled', patient: 'Mike Johnson', time: '8:45 AM' },
];

// Simulated trend data for the graph (past 7 days)
const initialTrendData = [12, 15, 10, 18, 14, 20, 15];

// Risk distribution data for the pie chart
const riskDistributionData = {
  labels: ['Low Risk', 'Medium Risk', 'High Risk'],
  datasets: [
    {
      data: [60, 30, 10],
      backgroundColor: ['#34d399', '#fbbf24', '#f87171'],
      borderWidth: 1,
      borderColor: '#ffffff',
    },
  ],
};

export function DashboardHome() {
  const { user, isDarkMode } = useAuth();
  const [stats, setStats] = useState(initialStats);
  const [trendData, setTrendData] = useState(initialTrendData);

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      setStats((prevStats) =>
        prevStats.map((stat) => {
          if (stat.label === 'Patients Today') {
            return { ...stat, value: stat.value + Math.floor(Math.random() * 2) };
          }
          if (stat.label === 'Kidney Stone Scans') {
            return { ...stat, value: stat.value + Math.floor(Math.random() * 1) };
          }
          if (stat.label === 'High Risk Patients') {
            return { ...stat, value: stat.value + Math.floor(Math.random() * 1) };
          }
          if (stat.label === 'Appointments') {
            return { ...stat, value: stat.value + Math.floor(Math.random() * 1) };
          }
          if (stat.label === 'Detection Accuracy') {
            const accuracy = Math.min(100, stat.value + Math.floor(Math.random() * 2));
            return { ...stat, value: accuracy };
          }
          return stat;
        })
      );

      // Update trend data
      setTrendData((prevData) => {
        const newData = [...prevData];
        newData.shift();
        newData.push(Math.floor(Math.random() * 10 + 10));
        return newData;
      });
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  // Card animation
  const cardVariants = {
    hidden: { opacity: 0, y: 15 },
    visible: (i) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.1,
        duration: 0.4,
        ease: 'easeOut',
      },
    }),
    hover: {
      y: -5,
      boxShadow: '0 8px 20px rgba(0, 0, 0, 0.12)',
      transition: {
        duration: 0.3,
        ease: 'easeInOut',
      },
    },
  };

  // Section animation for charts
  const sectionVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        ease: 'easeOut',
      },
    },
  };

  // Graph data (Line chart) with gradient fill
  const graphData = {
    labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],
    datasets: [
      {
        label: 'Kidney Stone Scans',
        data: trendData,
        borderColor: isDarkMode ? '#ffffff' : '#2563eb',
        backgroundColor: (context) => {
          const chart = context.chart;
          const { ctx, chartArea } = chart;
          if (!chartArea) return;
          const gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
          gradient.addColorStop(0, isDarkMode ? 'rgba(255, 255, 255, 0)' : 'rgba(37, 99, 235, 0)');
          gradient.addColorStop(1, isDarkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(37, 99, 235, 0.2)');
          return gradient;
        },
        fill: true,
        tension: 0.4,
      },
    ],
  };

  const graphOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        backgroundColor: isDarkMode ? '#1e3a8a' : '#1e3a8a',
        titleColor: '#ffffff',
        bodyColor: '#e0f2fe',
      },
    },
    scales: {
      x: {
        grid: {
          display: false,
        },
        ticks: {
          color: isDarkMode ? '#d1d5db' : '#6b7280',
        },
      },
      y: {
        grid: {
          color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : '#e5e7eb',
        },
        ticks: {
          color: isDarkMode ? '#d1d5db' : '#6b7280',
          beginAtZero: true,
        },
      },
    },
  };

  // Risk distribution data with dark mode support
  const riskDistributionData = {
    labels: ['Low Risk', 'Medium Risk', 'High Risk'],
    datasets: [
      {
        data: [60, 30, 10],
        backgroundColor: ['#34d399', '#fbbf24', '#f87171'],
        borderWidth: 1,
        borderColor: isDarkMode ? '#1f2937' : '#ffffff',
      },
    ],
  };

  // Pie chart options with dark mode support
  const pieOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          color: isDarkMode ? '#d1d5db' : '#1e40af',
          font: {
            size: 12,
          },
        },
      },
      tooltip: {
        backgroundColor: isDarkMode ? '#1e3a8a' : '#1e3a8a',
        titleColor: '#ffffff',
        bodyColor: '#e0f2fe',
      },
    },
  };

  return (
    <div className={`dashboard-home-container ${isDarkMode ? 'dark' : ''}`}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="dashboard-home-header"
      >
        <div className="flex items-center gap-3">
          <Stethoscope className="h-7 w-7 text-blue-600" />
          <h2 className="dashboard-home-title">
            Welcome, Dr. {user?.name || 'Doctor'}
          </h2>
        </div>
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="dashboard-home-text"
        >
          Real-time kidney stone detection insights at your fingertips.
        </motion.p>
      </motion.div>

      {/* Main Stats Section */}
      <div className="stats-section">
        <h3 className="section-title">Todayâ€™s Overview</h3>
        <div className="stats-grid">
          {stats.map((stat, index) => (
            <motion.div
              key={stat.label}
              custom={index}
              variants={cardVariants}
              initial="hidden"
              animate="visible"
              whileHover="hover"
              className="stats-card neumorphic relative overflow-hidden"
            >
              <div className="relative z-10 p-3 flex items-center justify-between">
                <div>
                  <p className="text-xs font-medium text-gray-600">{stat.label}</p>
                  {stat.isProgress ? (
                    <DetectionProgress percentage={stat.value} />
                  ) : (
                    <p className="mt-1 text-xl font-semibold text-gray-900">{stat.value}</p>
                  )}
                </div>
                <div className="p-1 rounded-full bg-blue-50">
                  <stat.icon className={`h-4 w-4 text-${stat.color}`} />
                </div>
              </div>
              <span className="stats-tooltip">{stat.tooltip}</span>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Quick Stats Section */}
      <div className="quick-stats-section">
        <h3 className="section-title">Monthly Summary</h3>
        <div className="quick-stats-grid">
          {quickStats.map((stat, index) => (
            <motion.div
              key={stat.label}
              custom={index}
              variants={cardVariants}
              initial="hidden"
              animate="visible"
              whileHover="hover"
              className="quick-stats-card neumorphic"
            >
              <p className="text-xs font-medium text-gray-600">{stat.label}</p>
              <p className="mt-1 text-lg font-semibold text-gray-900">{stat.value}</p>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Recent Activity Section */}
      <div className="recent-activity-section">
        <h3 className="section-title">Recent Activity</h3>
        <div className="recent-activity-card neumorphic">
          <ul className="divide-y divide-gray-200">
            {recentActivity.map((activity) => (
              <li key={activity.id} className="py-3 px-4 flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium text-gray-900">{activity.action}</p>
                  <p className="text-xs text-gray-600">{activity.patient}</p>
                </div>
                <p className="text-xs text-gray-500">{activity.time}</p>
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* Risk Distribution Section with Animation */}
      <motion.div
        variants={sectionVariants}
        initial="hidden"
        animate="visible"
        className="risk-distribution-section"
      >
        <h3 className="section-title">Patient Risk Distribution</h3>
        <div className="risk-distribution-card neumorphic">
          <div className="relative h-64">
            <Pie data={riskDistributionData} options={pieOptions} />
          </div>
        </div>
      </motion.div>

      {/* Graph Section with Animation */}
      <motion.div
        variants={sectionVariants}
        initial="hidden"
        animate="visible"
        className="graph-section"
      >
        <h3 className="section-title">Kidney Stone Scans (Last 7 Days)</h3>
        <div className="graph-card neumorphic">
          <div className="relative h-64">
            <Line data={graphData} options={graphOptions} />
          </div>
        </div>
      </motion.div>
    </div>
  );
}

src -> pages -> Dashboard -> DashboardHome.css:
/* Dashboard Container */
.dashboard-home-container {
  border-radius: 1rem;
  padding: 1.5rem;
  background: linear-gradient(145deg, #f7fafc 0%, #e3f2fd 100%);
  min-height: 100vh;
  position: relative;
}

/* Subtle Background Pattern */
.dashboard-home-container::before {
  content: '';
  position: absolute;
  inset: 0;
  background: url('https://www.transparenttextures.com/patterns/white-wave.png');
  opacity: 0.03;
  z-index: 0;
}

/* Header */
.dashboard-home-header {
  margin-bottom: 2rem;
  position: relative;
  z-index: 1;
}

.dashboard-home-title {
  font-size: 1.75rem;
  font-weight: 600;
  color: #1e40af;
}

.dashboard-home-text {
  font-size: 0.95rem;
  color: #6b7280;
  font-weight: 400;
}

/* Section Title */
.section-title {
  font-size: 1.25rem;
  font-weight: 500;
  color: #1e40af;
  margin-bottom: 1rem;
}

/* Main Stats Section */
.stats-section {
  margin-bottom: 2rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 1rem;
  z-index: 1;
}

.stats-card {
  position: relative;
  border-radius: 0.75rem;
  padding: 0.75rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.5);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Tooltip for Stats Cards */
.stats-tooltip {
  position: absolute;
  top: -2rem;
  left: 50%;
  transform: translateX(-50%);
  background: #2563eb;
  color: #ffffff;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  white-space: nowrap;
  display: none;
  z-index: 10;
}

.stats-card:hover .stats-tooltip {
  display: block;
}

/* Quick Stats Section */
.quick-stats-section {
  margin-bottom: 2rem;
}

.quick-stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 1rem;
}

.quick-stats-card {
  border-radius: 0.75rem;
  padding: 0.75rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.5);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Recent Activity Section */
.recent-activity-section {
  margin-bottom: 2rem;
}

.recent-activity-card {
  border-radius: 0.75rem;
  padding: 0.5rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.5);
}

/* Risk Distribution Section */
.risk-distribution-section {
  margin-bottom: 2rem;
}

.risk-distribution-card {
  border-radius: 0.75rem;
  padding: 1.5rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.5);
}

/* Graph Section */
.graph-section {
  margin-bottom: 2rem;
}

.graph-card {
  border-radius: 0.75rem;
  padding: 1.5rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.5);
}

/* Dark Mode */
.dashboard-home-container.dark {
  background: linear-gradient(145deg, #1e3a8a 0%, #3b82f6 100%);
}

.dashboard-home-container.dark .section-title,
.dashboard-home-container.dark .dashboard-home-title {
  color: #e0f2fe;
}

.dashboard-home-container.dark .dashboard-home-text {
  color: #d1d5db;
}

.dashboard-home-container.dark .stats-card,
.dashboard-home-container.dark .quick-stats-card,
.dashboard-home-container.dark .recent-activity-card,
.dashboard-home-container.dark .risk-distribution-card,
.dashboard-home-container.dark .graph-card {
  background: #2d3748;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2), -5px -5px 10px rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.dashboard-home-container.dark .stats-card p,
.dashboard-home-container.dark .quick-stats-card p,
.dashboard-home-container.dark .recent-activity-card p {
  color: #e0f2fe;
}

/* Dark Mode for Tooltips */
.dashboard-home-container.dark .stats-tooltip {
  background: #1e3a8a;
  color: #e0f2fe;
  border: 1px solid #d1d5db;
}

/* Dark Mode for Detection Progress Circle */
.dashboard-home-container.dark .text-blue-100 {
  color: #4b5563;
}

.dashboard-home-container.dark .text-blue-600 {
  color: #60a5fa;
}

.dashboard-home-container.dark .text-blue-900 {
  color: #e0f2fe;
}

/* Responsive */
@media (max-width: 767px) {
  .dashboard-home-container {
    padding: 1rem;
  }

  .dashboard-home-title {
    font-size: 1.5rem;
  }

  .dashboard-home-text {
    font-size: 0.875rem;
  }

  .section-title {
    font-size: 1.125rem;
  }

  .stats-grid,
  .quick-stats-grid {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }

  .stats-card,
  .quick-stats-card {
    padding: 0.5rem;
  }

  .stats-card p.text-xl {
    font-size: 1.25rem;
  }

  .stats-card .h-4 {
    height: 0.875rem;
    width: 0.875rem;
  }

  .stats-card .w-12 {
    width: 2rem;
    height: 2rem;
  }

  .stats-card .text-xs {
    font-size: 0.65rem;
  }

  .quick-stats-card p.text-lg {
    font-size: 1rem;
  }

  .recent-activity-card {
    padding: 0.25rem;
  }

  .recent-activity-card .py-3 {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .recent-activity-card .text-sm {
    font-size: 0.75rem;
  }

  .recent-activity-card .text-xs {
    font-size: 0.65rem;
  }

  .risk-distribution-card,
  .graph-card {
    padding: 1rem;
  }

  .risk-distribution-card .h-64,
  .graph-card .h-64 {
    height: 48rem;
  }
}

src -> pages -> Dashboard -> Profile.jsx:
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { User, Building2, Award, Mail, Phone, Upload, Edit2, Camera, Loader2 } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';
import { useDropzone } from 'react-dropzone';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import './Profile.css';

export function Profile() {
  const { user, updateProfile } = useAuth();
  const navigate = useNavigate();

  // Redirect if no user
  useEffect(() => {
    if (!user) {
      console.log('No user data - redirecting to login');
      navigate('/');
    }
  }, [user, navigate]);

  if (!user) {
    return null;
  }

  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const [isEditingPhoto, setIsEditingPhoto] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: user?.name || '',
    specialization: user?.specialization || '',
    hospital: user?.hospital || '',
    experience: user?.experience || '',
    email: user?.email || '',
    phone: user?.phone || '',
    profileImage: user?.profileImage || null,
    bio: user?.bio || '',
  });
  const [profileImagePreview, setProfileImagePreview] = useState(user?.profileImage || '/default-profile.png');

  useEffect(() => {
    if (formData.profileImage && typeof formData.profileImage !== 'string') {
      const url = URL.createObjectURL(formData.profileImage);
      setProfileImagePreview(url);
      return () => URL.revokeObjectURL(url);
    } else {
      setProfileImagePreview(formData.profileImage || '/default-profile.png');
    }
  }, [formData.profileImage]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: { 'image/*': [] },
    maxFiles: 1,
    onDrop: (acceptedFiles) => {
      setFormData((prev) => ({ ...prev, profileImage: acceptedFiles[0] }));
    },
  });

  const handleProfileSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await updateProfile(formData);
      toast.success('Profile updated successfully');
      setIsEditingProfile(false);
      // Remove Object.assign - rely on context to update user
    } catch (error) {
      toast.error('Failed to update profile');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePhotoSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await updateProfile({ profileImage: formData.profileImage });
      toast.success('Profile photo updated successfully');
      setIsEditingPhoto(false);
      // Remove Object.assign - rely on context to update user
    } catch (error) {
      toast.error('Failed to update photo');
    } finally {
      setIsLoading(false);
    }
  };

  const handleProfileCancel = () => {
    setIsEditingProfile(false);
    setFormData({
      name: user?.name || '',
      specialization: user?.specialization || '',
      hospital: user?.hospital || '',
      experience: user?.experience || '',
      email: user?.email || '',
      phone: user?.phone || '',
      profileImage: user?.profileImage || null,
      bio: user?.bio || '',
    });
  };

  const handlePhotoCancel = () => {
    setIsEditingPhoto(false);
    setFormData((prev) => ({ ...prev, profileImage: user?.profileImage || null }));
    setProfileImagePreview(user?.profileImage || '/default-profile.png');
  };

  const removeProfileImage = (e) => {
    e.stopPropagation();
    setFormData((prev) => ({ ...prev, profileImage: null }));
    setProfileImagePreview('/default-profile.png');
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="profile-container"
    >
      <div className="profile-card">
        <motion.div
          initial={{ scale: 0.9 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.3 }}
          className="profile-header"
        >
          <h1 className="profile-title">Doctor Profile</h1>
          <div className="header-buttons desktop-buttons">
            {!isEditingProfile && !isEditingPhoto && (
              <>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setIsEditingProfile(true)}
                  className="edit-profile-button"
                >
                  <Edit2 className="edit-icon" />
                  Edit Profile
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setIsEditingPhoto(true)}
                  className="edit-photo-button"
                >
                  <Camera className="edit-icon" />
                  Edit Profile Photo
                </motion.button>
              </>
            )}
          </div>
        </motion.div>

        {isEditingProfile ? (
          <form onSubmit={handleProfileSubmit} className="profile-form">
            <div className="form-grid">
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.1 }}
                className="form-group"
              >
                <label className="form-label">Name</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="form-input"
                />
              </motion.div>
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.2 }}
                className="form-group"
              >
                <label className="form-label">Hospital/Clinic</label>
                <input
                  type="text"
                  value={formData.hospital}
                  onChange={(e) => setFormData({ ...formData, hospital: e.target.value })}
                  className="form-input"
                />
              </motion.div>
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.3 }}
                className="form-group"
              >
                <label className="form-label">Specialization</label>
                <input
                  type="text"
                  value={formData.specialization}
                  onChange={(e) => setFormData({ ...formData, specialization: e.target.value })}
                  className="form-input"
                />
              </motion.div>
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.4 }}
                className="form-group"
              >
                <label className="form-label">Years of Experience</label>
                <input
                  type="number"
                  value={formData.experience}
                  onChange={(e) => setFormData({ ...formData, experience: e.target.value })}
                  className="form-input"
                />
              </motion.div>
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.5 }}
                className="form-group"
              >
                <label className="form-label">Email</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                  className="form-input"
                />
              </motion.div>
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.6 }}
                className="form-group"
              >
                <label className="form-label">Phone</label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  className="form-input"
                />
              </motion.div>
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.7 }}
                className="form-group"
              >
                <label className="form-label">Bio</label>
                <textarea
                  value={formData.bio}
                  onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                  className="form-input form-textarea"
                  rows="2"
                />
              </motion.div>
            </div>
            <div className="form-actions">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                type="button"
                onClick={handleProfileCancel}
                className="cancel-button"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                type="submit"
                className="form-submit"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="spinner" />
                    Saving...
                  </>
                ) : (
                  'Save Changes'
                )}
              </motion.button>
            </div>
          </form>
        ) : isEditingPhoto ? (
          <form onSubmit={handlePhotoSubmit} className="profile-form">
            <div className="form-grid">
              <motion.div
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.1 }}
                className="form-group"
              >
                <label className="form-label">Profile Photo</label>
                <div {...getRootProps()} className="profile-dropzone">
                  <input {...getInputProps()} />
                  {profileImagePreview && profileImagePreview !== '/default-profile.png' ? (
                    <div className="profile-image-preview">
                      <img
                        src={profileImagePreview}
                        alt="Profile Preview"
                        className="profile-image-edit"
                      />
                      <button
                        type="button"
                        className="remove-image-button"
                        onClick={removeProfileImage}
                      >
                        Ã—
                      </button>
                    </div>
                  ) : (
                    <div className="dropzone-content">
                      <Upload className="dropzone-icon" />
                      <p className="dropzone-text">
                        {isDragActive ? 'Drop here' : 'Upload Photo'}
                      </p>
                    </div>
                  )}
                </div>
              </motion.div>
            </div>
            <div className="form-actions">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                type="button"
                onClick={handlePhotoCancel}
                className="cancel-button"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                type="submit"
                className="form-submit"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="spinner" />
                    Saving...
                  </>
                ) : (
                  'Save Photo'
                )}
              </motion.button>
            </div>
          </form>
        ) : (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.2 }}
              className="profile-details"
            >
              <div className="details-left">
                <motion.div
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: 0.3 }}
                  className="profile-info"
                >
                  {profileImagePreview ? (
                    <img
                      src={profileImagePreview}
                      alt={user?.name}
                      className="profile-image"
                    />
                  ) : (
                    <div className="profile-placeholder">
                      <User className="placeholder-icon" />
                    </div>
                  )}
                  <div className="profile-text">
                    <h2 className="profile-name">Dr. {user?.name}</h2>
                    <p className="profile-specialization">{user?.specialization}</p>
                  </div>
                </motion.div>
                <motion.div
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: 0.4 }}
                  className="details-list"
                >
                  <div className="detail-item">
                    <Building2 className="detail-icon" />
                    <span>{user?.hospital}</span>
                  </div>
                  <div className="detail-item">
                    <Award className="detail-icon" />
                    <span>{user?.experience} years</span>
                  </div>
                </motion.div>
              </div>
              <motion.div
                initial={{ x: 20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.5 }}
                className="details-right"
              >
                <div className="detail-item">
                  <Mail className="detail-icon" />
                  <span>{user?.email}</span>
                </div>
                <div className="detail-item">
                  <Phone className="detail-icon" />
                  <span>{user?.phone}</span>
                </div>
                <div className="detail-item detail-bio">
                  <span>{user?.bio || 'No bio'}</span>
                </div>
              </motion.div>
            </motion.div>
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.6 }}
              className="mobile-buttons"
            >
              {!isEditingProfile && !isEditingPhoto && (
                <>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setIsEditingProfile(true)}
                    className="edit-profile-button"
                  >
                    <Edit2 className="edit-icon" />
                    Edit Profile
                  </motion.button>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setIsEditingPhoto(true)}
                    className="edit-photo-button"
                  >
                    <Camera className="edit-icon" />
                    Edit Profile Photo
                  </motion.button>
                </>
              )}
            </motion.div>
          </>
        )}
      </div>
    </motion.div>
  );
}

src -> pages -> Dashboard -> Profile.css:
.profile-container {
  padding: 2rem;
  max-width: 100%;
  width: 100%;
  margin: 0 auto;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 1rem;
  overflow-x: hidden;
}

.profile-card {
  background: rgba(255, 255, 255, 0.75);
  backdrop-filter: blur(8px);
  border-radius: 0.75rem;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 100%;
  box-sizing: border-box;
}

.profile-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.profile-title {
  font-size: 1.5rem;
  font-weight: bold;
  color: #111827;
}

.header-buttons,
.mobile-buttons {
  display: flex;
  gap: 0.5rem;
}

.desktop-buttons {
  display: flex;
}

.mobile-buttons {
  display: none;
  margin-top: 0.75rem;
}

.edit-profile-button,
.edit-photo-button {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.375rem 0.75rem;
  font-size: 0.75rem;
  font-weight: 500;
  color: #2563eb;
  background: none;
  border: 1px solid #2563eb;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.edit-profile-button:hover,
.edit-photo-button:hover {
  background: #2563eb;
  color: #ffffff;
}

.edit-icon {
  width: 0.875rem;
  height: 0.875rem;
}

.profile-form {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 0.5rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.form-label {
  font-size: 0.6875rem;
  font-weight: 500;
  color: #374151;
}

.form-input {
  padding: 0.375rem;
  border: 1px solid #d1d5db;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  color: #374151;
  background: #ffffff;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
  width: 100%;
  box-sizing: border-box;
}

.form-input:focus {
  border-color: #2563eb;
  outline: none;
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
}

.form-textarea {
  resize: vertical;
  min-height: 2rem;
}

.profile-dropzone {
  border: 2px dashed #d1d5db;
  border-radius: 0.25rem;
  padding: 0.75rem;
  text-align: center;
  cursor: pointer;
  height: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: border-color 0.2s ease, background-color 0.2s ease;
  width: 100%;
  box-sizing: border-box;
}

.profile-dropzone:hover {
  border-color: #2563eb;
  background-color: rgba(37, 99, 235, 0.05);
}

.profile-image-preview {
  position: relative;
  display: inline-block;
}

.profile-image-edit {
  width: 3.5rem;
  height: 3.5rem;
  border-radius: 9999px;
  object-fit: cover;
}

.remove-image-button {
  position: absolute;
  top: 0;
  right: 0;
  width: 1rem;
  height: 1rem;
  background: #ef4444;
  color: #ffffff;
  border: none;
  border-radius: 9999px;
  font-size: 0.75rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.remove-image-button:hover {
  background: #dc2626;
}

.dropzone-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
}

.dropzone-icon {
  width: 1rem;
  height: 1rem;
  color: #2563eb;
  transition: transform 0.2s ease;
}

.profile-dropzone:hover .dropzone-icon {
  transform: scale(1.1);
}

.dropzone-text {
  font-size: 0.75rem;
  color: #6b7280;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
}

.cancel-button,
.form-submit {
  padding: 0.375rem 0.75rem;
  font-size: 0.75rem;
  font-weight: 500;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.cancel-button {
  color: #6b7280;
  background: none;
  border: 1px solid #d1d5db;
}

.cancel-button:hover {
  background: #f3f4f6;
}

.form-submit {
  background: #2563eb;
  color: #ffffff;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.25rem;
}

.form-submit:hover {
  background: #1d4ed8;
}

.form-submit:disabled {
  background: #6b7280;
  cursor: not-allowed;
}

.spinner {
  width: 0.875rem;
  height: 0.875rem;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.profile-details {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
}

.details-left {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.profile-info {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.profile-image {
  width: 3.5rem;
  height: 3.5rem;
  border-radius: 9999px;
  object-fit: cover;
}

.profile-placeholder {
  width: 3.5rem;
  height: 3.5rem;
  border-radius: 9999px;
  background: #dbeafe;
  display: flex;
  align-items: center;
  justify-content: center;
}

.placeholder-icon {
  width: 1.75rem;
  height: 1.75rem;
  color: #2563eb;
}

.profile-text {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.profile-name {
  font-size: 1.125rem;
  font-weight: 600;
  color: #111827;
}

.profile-specialization {
  font-size: 0.75rem;
  color: #6b7280;
}

.details-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.details-right {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.detail-item {
  display: flex;
  align-items: center;
  gap: 0.375rem;
}

.detail-bio span {
  white-space: pre-wrap;
  font-size: 0.75rem;
  color: #374151;
}

.detail-icon {
  width: 0.875rem;
  height: 0.875rem;
  color: #2563eb;
}

.detail-item span {
  font-size: 0.75rem;
  color: #374151;
}

/* Dark Mode */
.profile-container.dark {
  background: rgba(31, 41, 55, 0.1);
}

.profile-container.dark .profile-title,
.profile-container.dark .profile-name {
  color: #ffffff;
}

.profile-container.dark .profile-card {
  background: rgba(31, 41, 55, 0.75);
}

.profile-container.dark .profile-specialization,
.profile-container.dark .dropzone-text {
  color: #9ca3af;
}

.profile-container.dark .form-label,
.profile-container.dark .detail-item span {
  color: #d1d5db;
}

.profile-container.dark .form-input {
  background: #374151;
  border-color: #4b5563;
  color: #d1d5db;
}

/* Responsive */
@media (min-width: 768px) {
  .profile-container {
    padding: 2rem;
    max-width: 900px;
  }

  .profile-card {
    padding: 1.5rem;
  }

  .profile-title {
    font-size: 1.5rem;
  }

  .edit-profile-button,
  .edit-photo-button,
  .form-input,
  .dropzone-text,
  .cancel-button,
  .form-submit {
    font-size: 0.875rem;
  }

  .edit-icon,
  .dropzone-icon,
  .detail-icon {
    width: 1rem;
    height: 1rem;
  }

  .profile-image,
  .profile-image-edit,
  .profile-placeholder {
    width: 5rem;
    height: 5rem;
  }

  .placeholder-icon {
    width: 2.5rem;
    height: 2.5rem;
  }

  .profile-name {
    font-size: 1.25rem;
  }

  .form-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .profile-details {
    grid-template-columns: repeat(2, 1fr);
  }

  .mobile-buttons {
    display: none;
  }

  .desktop-buttons {
    display: flex;
  }
}

@media (max-width: 767px) {
  body {
    overflow-x: hidden;
  }

  .profile-container {
    padding: 0.25rem;
    width: 100%;
    max-width: 100%;
    margin: 0; /* Let parent layout handle sidebar offset */
  }

  .profile-card {
    padding: 0.5rem;
    width: 100%;
    max-width: 260px; /* Further reduced to fit with sidebar */
    margin: 0 auto; /* Center in available space */
  }

  .profile-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.25rem;
    margin-bottom: 0.5rem;
  }

  .profile-title {
    font-size: 1rem;
  }

  .desktop-buttons {
    display: none;
  }

  .mobile-buttons {
    display: flex;
    flex-direction: column;
    width: 100%;
    gap: 0.25rem;
    margin-top: 0.5rem;
  }

  .edit-profile-button,
  .edit-photo-button {
    padding: 0.25rem 0.5rem;
    font-size: 0.6875rem;
  }

  .edit-icon {
    width: 0.75rem;
    height: 0.75rem;
  }

  .form-input,
  .dropzone-text {
    font-size: 0.6875rem;
    padding: 0.25rem;
  }

  .form-label {
    font-size: 0.625rem;
  }

  .form-textarea {
    min-height: 1.5rem;
  }

  .profile-dropzone {
    height: 60px;
    padding: 0.5rem;
  }

  .dropzone-icon {
    width: 0.875rem;
    height: 0.875rem;
  }

  .profile-image,
  .profile-image-edit,
  .profile-placeholder {
    width: 2.5rem;
    height: 2.5rem;
  }

  .placeholder-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .profile-name {
    font-size: 0.875rem;
  }

  .profile-specialization,
  .detail-item span {
    font-size: 0.6875rem;
  }

  .detail-icon {
    width: 0.75rem;
    height: 0.75rem;
  }

  .form-actions {
    gap: 0.25rem;
  }

  .cancel-button,
  .form-submit {
    padding: 0.25rem 0.5rem;
    font-size: 0.6875rem;
  }

  .spinner {
    width: 0.75rem;
    height: 0.75rem;
  }

  .remove-image-button {
    width: 0.875rem;
    height: 0.875rem;
    font-size: 0.625rem;
  }
}

src -> pages -> Dashboard -> Upload.jsx:
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Upload as UploadIcon, Loader2 } from 'lucide-react';
import { useDropzone } from 'react-dropzone';
import { motion } from 'framer-motion';
import toast from 'react-hot-toast';
import { AnalyzingAnimation } from '../../components/AnalyzingAnimation';
import './Upload.css';

export function Upload() {
  const [patientName, setPatientName] = useState('');
  const [patientId, setPatientId] = useState('');
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [date, setDate] = useState('');
  const [ctScan, setCtScan] = useState(null);
  const [ctScanUrl, setCtScanUrl] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const navigate = useNavigate();

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: { 'image/*': [] },
    maxFiles: 1,
    onDrop: (acceptedFiles) => setCtScan(acceptedFiles[0]),
  });

  useEffect(() => {
    if (ctScan) {
      const url = URL.createObjectURL(ctScan);
      setCtScanUrl(url);
      return () => URL.revokeObjectURL(url);
    } else {
      setCtScanUrl(null);
    }
  }, [ctScan]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!patientName || !patientId || !age || !gender || !date || !ctScan) {
      toast.error('Please fill all fields and upload a CT scan');
      return;
    }
    setIsLoading(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setIsLoading(false);
      setIsAnalyzing(true);
      await new Promise((resolve) => setTimeout(resolve, 3000));
      setIsAnalyzing(false);
      navigate('/dashboard/report-generated');
    } catch (error) {
      toast.error('Upload failed');
      setIsLoading(false);
    }
  };

  if (isAnalyzing) {
    return <AnalyzingAnimation />;
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="upload-container glass"
    >
      <motion.h2
        initial={{ scale: 0.9 }}
        animate={{ scale: 1 }}
        transition={{ duration: 0.3 }}
        className="upload-title"
      >
        Upload Patient Details
      </motion.h2>
      <form className="upload-form" onSubmit={handleSubmit}>
        <div className="form-grid">
          <motion.div
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.1 }}
            className="form-group"
          >
            <label htmlFor="patientName" className="form-label">Patient Name</label>
            <input
              id="patientName"
              type="text"
              value={patientName}
              onChange={(e) => setPatientName(e.target.value)}
              className="form-input"
            />
          </motion.div>
          <motion.div
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="form-group"
          >
            <label htmlFor="patientId" className="form-label">Patient ID</label>
            <input
              id="patientId"
              type="text"
              value={patientId}
              onChange={(e) => setPatientId(e.target.value)}
              className="form-input"
            />
          </motion.div>
          <motion.div
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="form-group"
          >
            <label htmlFor="age" className="form-label">Age</label>
            <input
              id="age"
              type="number"
              value={age}
              onChange={(e) => setAge(e.target.value)}
              className="form-input"
            />
          </motion.div>
          <motion.div
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="form-group"
          >
            <label htmlFor="gender" className="form-label">Gender</label>
            <select
              id="gender"
              value={gender}
              onChange={(e) => setGender(e.target.value)}
              className="form-input"
            >
              <option value="">Select</option>
              <option value="male">Male</option>
              <option value="female">Female</option>
              <option value="other">Other</option>
            </select>
          </motion.div>
          <motion.div
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.5 }}
            className="form-group"
          >
            <label htmlFor="date" className="form-label">Date</label>
            <input
              id="date"
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              className="form-input"
            />
          </motion.div>
          <motion.div
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.6 }}
            className="form-group dropzone-group"
          >
            <label className="form-label">CT Scan</label>
            <div {...getRootProps()} className="dropzone">
              <input {...getInputProps()} />
              {ctScanUrl ? (
                <div className="dropzone-image-container">
                  <img src={ctScanUrl} alt="Uploaded CT Scan" className="dropzone-image" />
                  <button
                    className="remove-image-button"
                    onClick={(e) => {
                      e.stopPropagation();
                      setCtScan(null);
                    }}
                  >
                    Ã—
                  </button>
                </div>
              ) : (
                <div className="dropzone-content">
                  <UploadIcon className="dropzone-icon" />
                  <label className="dropzone-label">
                    {isDragActive ? 'Drop here' : 'Upload CT Scan'}
                  </label>
                </div>
              )}
            </div>
          </motion.div>
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          type="submit"
          className="form-submit"
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <Loader2 className="spinner" />
              Uploading...
            </>
          ) : (
            'Upload'
          )}
        </motion.button>
      </form>
    </motion.div>
  );
}

src -> pages -> Dashboard -> Upload.css:
.upload-container {
  border-radius: 0.75rem;
  padding: 1.5rem;
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  max-width: 800px;
  margin: 1rem auto;
}

.upload-title {
  font-size: 1.5rem;
  font-weight: bold;
  color: #111827;
  margin-bottom: 1rem;
  text-align: center;
}

.upload-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 0.75rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.form-label {
  font-size: 0.75rem;
  font-weight: 500;
  color: #4b5563;
}

.form-input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  color: #374151;
  background: #ffffff;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.form-input:focus {
  border-color: #2563eb;
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
  outline: none;
}

.dropzone-group {
  grid-column: span 1;
}

.dropzone {
  border: 2px dashed #2563eb;
  border-radius: 0.5rem;
  padding: 1rem;
  text-align: center;
  cursor: pointer;
  height: 120px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.dropzone:hover {
  background-color: rgba(37, 99, 235, 0.05);
}

.dropzone-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
}

.dropzone-icon {
  width: 2rem;
  height: 2rem;
  color: #2563eb;
  transition: transform 0.2s ease;
}

.dropzone:hover .dropzone-icon {
  transform: scale(1.1);
}

.dropzone-label {
  font-size: 0.875rem;
  color: #4b5563;
}

.dropzone-image-container {
  position: relative;
  width: 100%;
  height: 100%;
}

.dropzone-image {
  width: 100%;
  height: 100%;
  object-fit: contain;
  border-radius: 0.25rem;
}

.remove-image-button {
  position: absolute;
  top: 0.25rem;
  right: 0.25rem;
  background: #ef4444;
  color: #ffffff;
  border: none;
  border-radius: 50%;
  width: 1.25rem;
  height: 1.25rem;
  font-size: 0.875rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.remove-image-button:hover {
  background: #dc2626;
}

.form-submit {
  width: 100%;
  padding: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: #ffffff;
  background: #2563eb;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  transition: background-color 0.2s ease;
}

.form-submit:hover {
  background: #1d4ed8;
}

.form-submit:disabled {
  background: #6b7280;
  cursor: not-allowed;
}

.spinner {
  width: 1rem;
  height: 1rem;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Responsive */
@media (min-width: 768px) {
  .form-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .dropzone-group {
    grid-column: span 2;
  }

  .upload-container {
    padding: 2rem;
  }

  .upload-title {
    font-size: 1.875rem;
  }
}

@media (max-width: 767px) {
  .upload-container {
    padding: 1rem;
  }

  .upload-title {
    font-size: 1.25rem;
  }

  .form-input,
  .dropzone-label {
    font-size: 0.75rem;
  }

  .dropzone {
    height: 100px;
  }

  .dropzone-icon {
    width: 1.5rem;
    height: 1.5rem;
  }

  .form-submit {
    padding: 0.5rem;
  }
}

src -> pages -> Dashboard -> ReportRetrive.jsx:
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Search, Download, Trash2, Eye, X } from 'lucide-react';
import toast from 'react-hot-toast';
import './ReportRetrieve.css';

export function ReportRetrieve() {
  const [searchQuery, setSearchQuery] = useState('');
  const [patient, setPatient] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  console.log('Current location in ReportRetrieve:', location.pathname);

  const patients = [
    { id: '12345', name: 'John Smith', date: '2025-01-12', status: 'Completed' },
    { id: 'REG6002', name: 'Jane Doe', date: '2025-03-14', status: 'Pending' },
    { id: 'REG6003', name: 'Mike Johnson', date: '2025-03-13', status: 'Completed' },
    { id: 'REG6004', name: 'Sarah Williams', date: '2025-03-12', status: 'In Progress' },
  ];

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
    setError('');
  };

  const handleSearch = async (e) => {
    e.preventDefault();
    setError('');
    setPatient(null);
    setLoading(true);

    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      const foundPatient = patients.find(
        (p) =>
          p.name.toLowerCase() === searchQuery.toLowerCase() ||
          p.id.toLowerCase() === searchQuery.toLowerCase()
      );

      if (foundPatient) {
        setPatient(foundPatient);
      } else {
        setError('Invalid patient name or ID');
      }
    } catch (err) {
      setError('Error searching for patient');
      console.error('Error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleClearSearch = () => {
    setSearchQuery('');
    setPatient(null);
    setError('');
  };

  const handleView = (patientId) => {
    const absolutePath = `/dashboard/report/${patientId}`;
    console.log(`Attempting to navigate to absolute path: ${absolutePath}`);
    navigate(absolutePath);
  };

  const handleDownload = async (patientId) => {
    const toastId = toast.loading('Downloading report...'); // Store the toast ID
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate download
      console.log(`Downloading report for patient ID: ${patientId}`);
      toast.success('Report downloaded successfully!', { id: toastId }); // Update the toast
    } catch (error) {
      console.error('Error downloading report:', error);
      toast.error('Failed to download report', { id: toastId }); // Update the toast on error
    }
  };

  const handleDelete = async (patientId) => {
    const confirmDelete = window.confirm(
      'Are you sure you want to delete this report? This action cannot be undone.'
    );
    if (!confirmDelete) return;

    const toastId = toast.loading('Deleting report...'); // Store the toast ID
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      setPatient(null);
      toast.success('Report deleted successfully!', { id: toastId });
    } catch (error) {
      console.error('Error deleting report:', error);
      toast.error('Failed to delete report', { id: toastId });
    }
  };

  return (
    <div className="report-retrieve-container">
      <h2 className="report-title">Search Patient Records</h2>
      <form className="search-form" onSubmit={handleSearch}>
        <div className="form-group">
          <label htmlFor="search" className="form-label">
            Search by Patient Name or ID
          </label>
          <div className="search-bar-container">
            <input
              id="search"
              type="text"
              value={searchQuery}
              onChange={handleSearchChange}
              className="form-input neumorphic-input"
              placeholder="Enter patient name or ID..."
            />
            <button type="submit" className="search-btn" disabled={loading}>
              <Search className="h-5 w-5 mr-2" />
              {loading ? 'Searching...' : 'Search'}
            </button>
            {searchQuery && (
              <button
                type="button"
                onClick={handleClearSearch}
                className="clear-btn"
                title="Clear Search"
              >
                <X className="h-5 w-5" />
              </button>
            )}
          </div>
        </div>
      </form>

      {loading && <p className="loading-text">Loading...</p>}
      {!loading && error && <p className="error-text">{error}</p>}
      {!loading && patient && (
        <div className="patient-details-section">
          <h3 className="section-title">Patient Details</h3>
          <div className="patient-table neumorphic">
            <div className="table-header">
              <span>Name</span>
              <span>Reg. No</span>
              <span>Date</span>
              <span>Status</span>
              <span>Actions</span>
            </div>
            <div className="table-row">
              <span>{patient.name}</span>
              <span>{patient.id}</span>
              <span>{patient.date}</span>
              <span className={`status ${patient.status.toLowerCase()}`}>
                {patient.status}
              </span>
              <div className="actions">
                <button
                  onClick={() => handleView(patient.id)}
                  className="action-btn view"
                  title="View Report"
                >
                  <Eye className="h-4 w-4" />
                </button>
                <button
                  onClick={() => handleDownload(patient.id)}
                  className="action-btn download"
                  title="Download Report"
                >
                  <Download className="h-4 w-4" />
                </button>
                <button
                  onClick={() => handleDelete(patient.id)}
                  className="action-btn delete"
                  title="Delete Report"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

src -> pages -> Dashboard -> ReportRetrive.css:
/* Report Retrieve Container */
.report-retrieve-container {
  border-radius: 0.75rem;
  padding: 2rem;
  background: linear-gradient(145deg, #f7fafc 0%, #e3f2fd 100%);
  min-height: 100vh;
  position: relative;
}

/* Subtle Background Pattern */
.report-retrieve-container::before {
  content: '';
  position: absolute;
  inset: 0;
  background: url('https://www.transparenttextures.com/patterns/white-wave.png');
  opacity: 0.03;
  z-index: 0;
}

/* Report Title */
.report-title {
  font-size: 1.875rem;
  font-weight: 600;
  color: #1e40af;
  margin-bottom: 2rem;
  position: relative;
  z-index: 1;
}

/* Search Form */
.search-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  position: relative;
  z-index: 1;
}

/* Form Group */
.form-group {
  position: relative;
}

/* Form Label */
.form-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #6b7280;
  margin-bottom: 0.5rem;
  display: block;
}

/* Search Bar Container */
.search-bar-container {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

/* Form Input */
.form-input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  color: #111827;
  background: #f7fafc;
  transition: all 0.3s ease;
}

.form-input:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

/* Neumorphic Input Style */
.neumorphic-input {
  background: #f7fafc;
  box-shadow: inset 3px 3px 6px rgba(0, 0, 0, 0.05), inset -3px -3px 6px rgba(255, 255, 255, 0.8);
  border: none;
}

/* Search Button */
.search-btn {
  padding: 0.75rem 1.5rem;
  background-color: #2563eb;
  color: #ffffff;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  display: flex;
  align-items: center;
  transition: background-color 0.3s ease;
}

.search-btn:hover:not(:disabled) {
  background-color: #1e40af;
}

.search-btn:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

/* Clear Button */
.clear-btn {
  padding: 0.75rem;
  background-color: #ef4444;
  color: #ffffff;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  transition: background-color 0.3s ease;
}

.clear-btn:hover {
  background-color: #dc2626;
}

/* Loading Text */
.loading-text {
  font-size: 1rem;
  color: #2563eb;
  margin-top: 1rem;
  text-align: center;
}

/* Error Text */
.error-text {
  font-size: 1rem;
  color: #ef4444;
  margin-top: 1rem;
  text-align: center;
}

/* Patient Details Section */
.patient-details-section {
  margin-top: 2rem;
}

.section-title {
  font-size: 1.25rem;
  font-weight: 500;
  color: #1e40af;
  margin-bottom: 1rem;
}

/* Patient Table */
.patient-table {
  border-radius: 0.75rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(255, 255, 255, 0.5);
  overflow: hidden;
}

.table-header,
.table-row {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  gap: 1rem;
  padding: 1rem;
  align-items: center;
}

.table-header {
  background: #e0f2fe;
  font-size: 0.75rem;
  font-weight: 600;
  color: #6b7280;
  text-transform: uppercase;
}

.table-row {
  font-size: 0.875rem;
  color: #111827;
  border-top: 1px solid #e5e7eb;
  transition: background-color 0.3s ease;
}

.table-row:hover {
  background-color: #f0f9ff;
}

/* Status Badge */
.status {
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 500;
}

.status.completed {
  background-color: #d1fae5;
  color: #065f46;
}

.status.pending {
  background-color: #fef3c7;
  color: #92400e;
}

.status.in-progress {
  background-color: #e0f2fe;
  color: #1e40af;
}

/* Actions */
.actions {
  display: flex;
  gap: 0.5rem;
  position: relative; /* Ensure buttons are positioned correctly */
  z-index: 10; /* Ensure buttons are above other elements */
}

.action-btn {
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.3s ease;
  cursor: pointer; /* Ensure cursor indicates clickability */
  pointer-events: auto; /* Ensure clicks are not blocked */
  background: none; /* Remove any background that might interfere */
  border: none; /* Remove any border that might interfere */
}

.action-btn.view {
  color: #10b981;
}

.action-btn.view:hover {
  background-color: #d1fae5;
  transform: scale(1.1);
}

.action-btn.download {
  color: #2563eb;
}

.action-btn.download:hover {
  background-color: #e0f2fe;
  transform: scale(1.1);
}

.action-btn.delete {
  color: #ef4444;
}

.action-btn.delete:hover {
  background-color: #fee2e2;
  transform: scale(1.1);
}

/* Dark Mode */
.report-retrieve-container.dark {
  background: linear-gradient(145deg, #1e3a8a 0%, #3b82f6 100%);
}

.report-retrieve-container.dark .report-title,
.report-retrieve-container.dark .section-title {
  color: #e0f2fe;
}

.report-retrieve-container.dark .form-label {
  color: #d1d5db;
}

.report-retrieve-container.dark .form-input {
  background: #2d3748;
  color: #e0f2fe;
  box-shadow: inset 3px 3px 6px rgba(0, 0, 0, 0.2), inset -3px -3px 6px rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.report-retrieve-container.dark .search-btn {
  background-color: #3b82f6;
}

.report-retrieve-container.dark .search-btn:hover:not(:disabled) {
  background-color: #2563eb;
}

.report-retrieve-container.dark .search-btn:disabled {
  background-color: #6b7280;
}

.report-retrieve-container.dark .clear-btn {
  background-color: #f87171;
}

.report-retrieve-container.dark .clear-btn:hover {
  background-color: #ef4444;
}

.report-retrieve-container.dark .loading-text {
  color: #3b82f6;
}

.report-retrieve-container.dark .patient-table {
  background: #2d3748;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2), -5px -5px 10px rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.report-retrieve-container.dark .table-header {
  background: #1e40af;
  color: #e0f2fe;
}

.report-retrieve-container.dark .table-row {
  color: #e0f2fe;
  border-top: 1px solid #4b5563;
}

.report-retrieve-container.dark .table-row:hover {
  background-color: #374151;
}

.report-retrieve-container.dark .status.completed {
  background-color: #065f46;
  color: #d1fae5;
}

.report-retrieve-container.dark .status.pending {
  background-color: #92400e;
  color: #fef3c7;
}

.report-retrieve-container.dark .status.in-progress {
  background-color: #1e40af;
  color: #e0f2fe;
}

.report-retrieve-container.dark .error-text {
  color: #f87171;
}

/* Responsive */
@media (max-width: 767px) {
  .report-retrieve-container {
    padding: 1rem;
  }

  .report-title {
    font-size: 1.5rem;
  }

  .section-title {
    font-size: 1.125rem;
  }

  .form-input {
    padding: 0.5rem 0.75rem;
    font-size: 0.75rem;
  }

  .search-btn,
  .clear-btn {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
  }

  .search-btn svg,
  .clear-btn svg {
    height: 0.875rem;
    width: 0.875rem;
    margin-right: 0.5rem;
  }

  .loading-text,
  .error-text {
    font-size: 0.875rem;
  }

  .table-header,
  .table-row {
    grid-template-columns: 1fr 1fr 1fr 0.5fr 1fr;
    gap: 0.5rem;
    padding: 0.75rem;
  }

  .table-header {
    font-size: 0.65rem;
  }

  .table-row {
    font-size: 0.75rem;
  }

  .status {
    padding: 0.2rem 0.5rem;
    font-size: 0.65rem;
  }

  .action-btn {
    padding: 0.25rem;
  }

  .action-btn svg {
    height: 0.875rem;
    width: 0.875rem;
  }
}

src -> pages -> Dashboard -> Settings.jsx:
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Bell, Lock, Eye, EyeOff, Moon, Sun } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';
import toast from 'react-hot-toast';
import './Settings.css';

export function Settings() {
  const { isDarkMode, toggleDarkMode } = useAuth();

  const [notifications, setNotifications] = useState({
    email: true,
    desktop: true,
    updates: false,
  });

  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  const handleNotificationChange = (key) => {
    setNotifications((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
    toast.success('Notification settings updated');
  };

  const handlePasswordSubmit = (e) => {
    e.preventDefault();
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error('New passwords do not match');
      return;
    }
    if (passwordForm.newPassword.length < 6) {
      toast.error('New password must be at least 6 characters');
      return;
    }
    toast.success('Password updated successfully');
    setPasswordForm({
      currentPassword: '',
      newPassword: '',
      confirmPassword: '',
    });
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className={`settings-container ${isDarkMode ? 'dark' : ''}`}
    >
      <div className="settings-wrapper">
        <h2 className="settings-title">Settings</h2>
        <div className="settings-sections">
          {/* Notifications */}
          <div className="settings-section">
            <div className="section-header">
              <Bell className="section-icon" />
              <h3 className="section-title">Notifications</h3>
            </div>
            <div className="section-content">
              <div className="notification-item">
                <div>
                  <p className="notification-label">Email Notifications</p>
                  <p className="notification-desc">Receive email updates about your scans</p>
                </div>
                <button
                  onClick={() => handleNotificationChange('email')}
                  className={`toggle-switch ${notifications.email ? 'active' : ''}`}
                >
                  <span className="toggle-knob" />
                </button>
              </div>
              <div className="notification-item">
                <div>
                  <p className="notification-label">Desktop Notifications</p>
                  <p className="notification-desc">Get desktop alerts for important updates</p>
                </div>
                <button
                  onClick={() => handleNotificationChange('desktop')}
                  className={`toggle-switch ${notifications.desktop ? 'active' : ''}`}
                >
                  <span className="toggle-knob" />
                </button>
              </div>
              <div className="notification-item">
                <div>
                  <p className="notification-label">Product Updates</p>
                  <p className="notification-desc">Receive updates about new features</p>
                </div>
                <button
                  onClick={() => handleNotificationChange('updates')}
                  className={`toggle-switch ${notifications.updates ? 'active' : ''}`}
                >
                  <span className="toggle-knob" />
                </button>
              </div>
            </div>
          </div>

          {/* Password */}
          <div className="settings-section">
            <div className="section-header">
              <Lock className="section-icon" />
              <h3 className="section-title">Change Password</h3>
            </div>
            <form onSubmit={handlePasswordSubmit} className="section-content">
              <div className="form-group">
                <label className="form-label">Current Password</label>
                <div className="password-input">
                  <input
                    type={showCurrentPassword ? 'text' : 'password'}
                    value={passwordForm.currentPassword}
                    onChange={(e) =>
                      setPasswordForm({ ...passwordForm, currentPassword: e.target.value })
                    }
                    className="form-input"
                  />
                  <button
                    type="button"
                    onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                    className="password-toggle"
                  >
                    {showCurrentPassword ? (
                      <EyeOff className="toggle-icon" />
                    ) : (
                      <Eye className="toggle-icon" />
                    )}
                  </button>
                </div>
              </div>
              <div className="form-group">
                <label className="form-label">New Password</label>
                <div className="password-input">
                  <input
                    type={showNewPassword ? 'text' : 'password'}
                    value={passwordForm.newPassword}
                    onChange={(e) =>
                      setPasswordForm({ ...passwordForm, newPassword: e.target.value })
                    }
                    className="form-input"
                  />
                  <button
                    type="button"
                    onClick={() => setShowNewPassword(!showNewPassword)}
                    className="password-toggle"
                  >
                    {showNewPassword ? (
                      <EyeOff className="toggle-icon" />
                    ) : (
                      <Eye className="toggle-icon" />
                    )}
                  </button>
                </div>
              </div>
              <div className="form-group">
                <label className="form-label">Confirm New Password</label>
                <input
                  type="password"
                  value={passwordForm.confirmPassword}
                  onChange={(e) =>
                    setPasswordForm({ ...passwordForm, confirmPassword: e.target.value })
                  }
                  className="form-input"
                />
              </div>
              <div className="form-actions">
                <button type="submit" className="submit-button">
                  Update Password
                </button>
              </div>
            </form>
          </div>

          {/* Appearance */}
          <div className="settings-section">
            <div className="section-header">
              {isDarkMode ? (
                <Moon className="section-icon" />
              ) : (
                <Sun className="section-icon" />
              )}
              <h3 className="section-title">Appearance</h3>
            </div>
            <div className="section-content">
              <div className="notification-item">
                <div>
                  <p className="notification-label">Dark Mode</p>
                  <p className="notification-desc">Toggle dark mode on or off</p>
                </div>
                <button
                  onClick={() => {
                    toggleDarkMode();
                    toast.success(`${isDarkMode ? 'Light' : 'Dark'} mode enabled`);
                  }}
                  className={`toggle-switch ${isDarkMode ? 'active' : ''}`}
                >
                  <span className="toggle-knob" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
}

src -> pages -> Dashboard -> Settings.css:
.settings-container {
  padding: 2rem;
  max-width: 4xl;
  margin: 0 auto;
}

.settings-wrapper {
  max-width: 100%;
}

.settings-title {
  font-size: 1.875rem;
  font-weight: bold;
  color: #111827;
  margin-bottom: 2rem;
}

.settings-sections {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.settings-section {
  background: #ffffff;
  border-radius: 0.75rem;
  padding: 2rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.section-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1.5rem;
}

.section-icon {
  width: 1.5rem;
  height: 1.5rem;
  color: #2563eb;
}

.section-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: #111827;
}

.section-content {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.notification-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 0;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.notification-label {
  font-size: 1rem;
  font-weight: 500;
  color: #374151;
}

.notification-desc {
  font-size: 0.875rem;
  color: #6b7280;
}

.toggle-switch {
  position: relative;
  width: 2.75rem;
  height: 1.5rem;
  background: #d1d5db;
  border-radius: 9999px;
  cursor: pointer;
  border: none;
  transition: background-color 0.2s ease;
}

.toggle-switch.active {
  background: #2563eb;
}

.toggle-knob {
  position: absolute;
  top: 0.25rem;
  left: 0.25rem;
  width: 1rem;
  height: 1rem;
  background: #ffffff;
  border-radius: 50%;
  transition: transform 0.2s ease;
}

.toggle-switch.active .toggle-knob {
  transform: translateX(1.25rem);
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.form-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
}

.password-input {
  position: relative;
}

.form-input {
  width: 100%;
  padding: 0.5rem 2.5rem 0.5rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  color: #374151;
  background: #ffffff;
}

.password-toggle {
  position: absolute;
  top: 50%;
  right: 0.75rem;
  transform: translateY(-50%);
  background: none;
  border: none;
  cursor: pointer;
}

.toggle-icon {
  width: 1.25rem;
  height: 1.25rem;
  color: #6b7280;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
}

.submit-button {
  padding: 0.5rem 1rem;
  background: #2563eb;
  color: #ffffff;
  border: none;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.submit-button:hover {
  background: #1d4ed8;
}

/* Dark Mode Styles */
.settings-container.dark .settings-title {
  color: #ffffff;
}

.settings-container.dark .settings-section {
  background: #1f2937;
}

.settings-container.dark .section-title,
.settings-container.dark .notification-label,
.settings-container.dark .form-label {
  color: #d1d5db;
}

.settings-container.dark .notification-desc {
  color: #9ca3af;
}

.settings-container.dark .form-input {
  background: #374151;
  border-color: #4b5563;
  color: #d1d5db;
}

.settings-container.dark .toggle-switch {
  background: #4b5563;
}

.settings-container.dark .submit-button {
  background: #2563eb;
}

.settings-container.dark .submit-button:hover {
  background: #1d4ed8;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .settings-container {
    padding: 1rem; /* Reduce padding */
  }

  .settings-title {
    font-size: 1.5rem; /* Smaller title */
    margin-bottom: 1rem;
  }

  .settings-sections {
    gap: 1rem; /* Tighten section spacing */
  }

  .settings-section {
    padding: 1rem; /* Reduce padding */
  }

  .section-header {
    margin-bottom: 1rem;
  }

  .section-title {
    font-size: 1.125rem; /* Smaller section titles */
  }

  .section-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .notification-item {
    flex-direction: column; /* Stack label and toggle */
    align-items: flex-start;
    gap: 0.25rem;
  }

  .notification-label {
    font-size: 0.875rem;
  }

  .notification-desc {
    font-size: 0.75rem;
  }

  .toggle-switch {
    width: 2.25rem; /* Slightly smaller toggle */
    height: 1.25rem;
  }

  .toggle-knob {
    top: 0.125rem;
    left: 0.125rem;
    width: 1rem;
    height: 1rem;
  }

  .toggle-switch.active .toggle-knob {
    transform: translateX(1rem);
  }

  .form-group {
    gap: 0.25rem;
  }

  .form-label {
    font-size: 0.75rem;
  }

  .form-input {
    padding: 0.5rem 2rem 0.5rem 0.75rem; /* Adjust padding */
    font-size: 0.75rem;
  }

  .password-toggle {
    right: 0.5rem;
  }

  .toggle-icon {
    width: 1rem;
    height: 1rem;
  }

  .submit-button {
    width: 100%; /* Full-width button */
    padding: 0.5rem;
    font-size: 0.75rem;
  }
}

src -> pages -> Dashboard -> ReportGenrated.jsx:
import React from 'react';
import { motion } from 'framer-motion';
import './ReportGenerated.css';

export function ReportGenerated() {
  return (
    <div className="glass report-generated-container">
      <motion.h2
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="report-generated-title"
      >
        Report Generated
      </motion.h2>
      <motion.p
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="report-generated-text"
      >
        The analysis is complete, and the report has been generated. You can view the report below.
      </motion.p>
      <div className="report-placeholder">
        <p>Report content will be displayed here.</p>
      </div>
    </div>
  );
}

src -> pages -> Dashboard -> ReportGenrated.css:
.report-generated-container {
    border-radius: 0.75rem;
    padding: 2rem;
  }
  
  .report-generated-title {
    font-size: 1.875rem;
    font-weight: bold;
    color: #111827;
    margin-bottom: 1rem;
  }
  
  .report-generated-text {
    font-size: 1rem;
    color: #4b5563;
    margin-bottom: 2rem;
  }
  
  .report-placeholder {
    background: #f3f4f6;
    padding: 2rem;
    border-radius: 0.5rem;
    text-align: center;
    color: #6b7280;
  }

src -> pages -> Dashboard -> PatientReport.jsx:
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Document, Page, pdfjs } from 'react-pdf';
import { Download, Printer, ZoomIn, ZoomOut } from 'lucide-react';
import './PatientReport.css';

// Use the local Web Worker script
pdfjs.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.js';

export function PatientReport() {
  console.log('PatientReport component rendered');

  const { patientId } = useParams();
  const navigate = useNavigate();
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [scale, setScale] = useState(1.0);
  const [report, setReport] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);

  console.log('Patient ID from useParams:', patientId);

  const reports = {
    '12345': {
      id: '12345',
      name: 'John Smith',
      pdfUrl: '../../../public/reports/fromMongoDB.pdf',
    },
    REG6002: {
      id: 'REG6002',
      name: 'Jane Doe',
      pdfUrl: '/reports/sample.pdf',
    },
    REG6003: {
      id: 'REG6003',
      name: 'Mike Johnson',
      pdfUrl: '/reports/sample.pdf',
    },
    REG6004: {
      id: 'REG6004',
      name: 'Sarah Williams',
      pdfUrl: '/reports/sample.pdf',
    },
  };

  useEffect(() => {
    const fetchReport = async () => {
      setLoading(true);
      try {
        console.log('Fetching report for patient ID:', patientId);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const foundReport = reports[patientId];
        console.log('Found report:', foundReport);
        if (foundReport) {
          // Test the PDF URL by fetching it
          console.log('Testing PDF URL:', foundReport.pdfUrl);
          const response = await fetch(foundReport.pdfUrl, { method: 'HEAD' });
          if (!response.ok) {
            throw new Error(`PDF URL is not accessible: ${response.status} ${response.statusText}`);
          }
          console.log('PDF URL is accessible');
          setReport(foundReport);
        } else {
          setError('Report not found for patient ID: ' + patientId);
        }
      } catch (err) {
        setError('Error fetching report: ' + err.message);
        console.error('Error in fetchReport:', err);
      } finally {
        setLoading(false);
      }
    };
    fetchReport();
  }, [patientId]);

  const onDocumentLoadSuccess = ({ numPages }) => {
    console.log('PDF loaded successfully, number of pages:', numPages);
    setNumPages(numPages);
  };

  const handleDownload = () => {
    if (report.pdfUrl) {
      console.log('Downloading PDF from URL:', report.pdfUrl);
      const link = document.createElement('a');
      link.href = report.pdfUrl;
      link.download = `report-${patientId}.pdf`;
      link.click();
    } else {
      console.log('PDF URL not available');
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const zoomIn = () => setScale(scale + 0.1);
  const zoomOut = () => setScale(scale > 0.5 ? scale - 0.1 : scale);

  const handleBack = () => {
    console.log('Back to Search button clicked');
    console.log('Navigating to /dashboard/report-retrieve');
    try {
      navigate('/dashboard/report-retrieve');
    } catch (error) {
      console.error('Navigation error:', error);
    }
  };

  const goToPreviousPage = () => {
    if (pageNumber > 1) {
      setPageNumber(pageNumber - 1);
    }
  };

  const goToNextPage = () => {
    if (pageNumber < numPages) {
      setPageNumber(pageNumber + 1);
    }
  };

  if (loading) {
    console.log('Rendering loading state');
    return (
      <div className="report-container">
        <h2 className="report-title">Patient Report</h2>
        <p className="loading-text">Loading report...</p>
      </div>
    );
  }

  if (error || !report) {
    console.log('Rendering error state, error:', error);
    return (
      <div className="report-container">
        <h2 className="report-title">Patient Report</h2>
        <p className="error-text">{error || 'Report not found'}</p>
        <button onClick={handleBack} className="back-btn">
          Back to Search
        </button>
      </div>
    );
  }

  console.log('Rendering report view, report:', report);
  return (
    <div className="report-container">
      <h2 className="report-title">Patient Report - {report.name}</h2>
      <div className="report-card neumorphic">
        <div className="pdf-viewer">
          <Document
            file={report.pdfUrl}
            onLoadSuccess={onDocumentLoadSuccess}
            onLoadError={(error) => {
              console.error('Error loading PDF:', error);
              setError('Failed to load PDF: ' + error.message);
            }}
          >
            <Page pageNumber={pageNumber} scale={scale} />
          </Document>
          <div className="pdf-navigation">
            <button
              onClick={goToPreviousPage}
              disabled={pageNumber <= 1}
              className="nav-btn"
            >
              Previous
            </button>
            <p>
              Page {pageNumber} of {numPages}
            </p>
            <button
              onClick={goToNextPage}
              disabled={pageNumber >= numPages}
              className="nav-btn"
            >
              Next
            </button>
            <button onClick={zoomOut} className="nav-btn">
              <ZoomOut className="h-4 w-4 mr-1" />
              Zoom Out
            </button>
            <button onClick={zoomIn} className="nav-btn">
              <ZoomIn className="h-4 w-4 mr-1" />
              Zoom In
            </button>
          </div>
        </div>
        <div className="report-actions">
          <button onClick={handleDownload} className="download-btn">
            <Download className="h-5 w-5 mr-2" />
            Download Report
          </button>
          <button onClick={handlePrint} className="download-btn">
            <Printer className="h-5 w-5 mr-2" />
            Print Report
          </button>
          <button onClick={handleBack} className="back-btn">
            Back to Search
          </button>
        </div>
      </div>
    </div>
  );
}


src -> pages -> Dashboard -> PatientReport.css:
.report-container {
  padding: 2rem;
  background: #f7fafc;
  min-height: 100vh;
  position: relative;
}

.report-title {
  font-size: 1.875rem;
  font-weight: 600;
  color: #1e40af;
  margin-bottom: 2rem;
}

.report-card {
  border-radius: 0.75rem;
  background: #f7fafc;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.05), -5px -5px 10px rgba(255, 255, 255, 0.8);
  padding: 1.5rem;
}

.pdf-viewer {
  margin-bottom: 1.5rem;
}

.pdf-navigation {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-top: 1rem;
}

.nav-btn {
  padding: 0.5rem 1rem;
  background-color: #2563eb;
  color: #ffffff;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  transition: background-color 0.3s ease;
}

.nav-btn:hover:not(:disabled) {
  background-color: #1e40af;
}

.nav-btn:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
}

.report-actions {
  display: flex;
  justify-content: center;
  gap: 1rem;
  position: relative; /* Ensure buttons are positioned correctly */
  z-index: 10; /* Ensure buttons are above other elements */
}

.download-btn {
  padding: 0.75rem 1.5rem;
  background-color: #2563eb;
  color: #ffffff;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  display: flex;
  align-items: center;
  transition: background-color 0.3s ease;
  pointer-events: auto; /* Ensure clickability */
}

.download-btn:hover {
  background-color: #1e40af;
}

.back-btn {
  padding: 0.75rem 1.5rem;
  background-color: #ef4444;
  color: #ffffff;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  transition: background-color 0.3s ease;
  pointer-events: auto; /* Ensure clickability */
  cursor: pointer; /* Indicate clickability */
}

.back-btn:hover {
  background-color: #dc2626;
}

.loading-text {
  font-size: 1rem;
  color: #2563eb;
  text-align: center;
}

.error-text {
  font-size: 1rem;
  color: #ef4444;
  text-align: center;
}

/* Dark Mode */
.report-container.dark {
  background: #2d3748;
}

.report-container.dark .report-title {
  color: #e0f2fe;
}

.report-container.dark .report-card {
  background: #374151;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2), -5px -5px 10px rgba(255, 255, 255, 0.1);
}

.report-container.dark .nav-btn {
  background-color: #3b82f6;
}

.report-container.dark .nav-btn:hover:not(:disabled) {
  background-color: #2563eb;
}

.report-container.dark .download-btn {
  background-color: #3b82f6;
}

.report-container.dark .download-btn:hover {
  background-color: #2563eb;
}

.report-container.dark .back-btn {
  background-color: #f87171;
}

.report-container.dark .back-btn:hover {
  background-color: #ef4444;
}

.report-container.dark .loading-text {
  color: #3b82f6;
}

.report-container.dark .error-text {
  color: #f87171;
}

src -> pages -> Dashboard -> Dashboard.jsx:
import React, { useState, useEffect } from 'react';
import { Routes, Route, useLocation, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Sidebar } from '../../components/Sidebar';
import { BottomBar } from '../../components/Bottombar'; // Import the new BottomBar component
import { WelcomeScreen } from '../../components/WelcomeScreen';
import { DashboardHome } from './DashboardHome';
import { Profile } from './Profile';
import { Upload } from './Upload';
import { ReportRetrieve } from './ReportRetrieve';
import { Settings } from './Settings';
import { ReportGenerated } from './ReportGenerated';
import { useAuth } from '../../context/AuthContext';
import { PatientReport } from './PatientReport';
import { Menu, ArrowLeft } from 'lucide-react';
import './Dashboard.css';

export function Dashboard() {
  const [showWelcome, setShowWelcome] = useState(true);
  const { user, logout, isDarkMode } = useAuth();
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();

  console.log('Current location in Dashboard:', location.pathname);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const handleResize = () => {
        const mobile = window.innerWidth <= 768;
        console.log('Window width:', window.innerWidth, 'Is mobile:', mobile);
        setIsMobile(mobile);
        if (mobile) {
          setIsSidebarCollapsed(true);
        } else {
          setIsSidebarCollapsed(false);
        }
      };

      handleResize();
      window.addEventListener('resize', handleResize);
      return () => window.removeEventListener('resize', handleResize);
    }
  }, []);

  const handleLogout = () => {
    logout();
    navigate('/');
    setShowDropdown(false);
  };

  return (
    <div className={`dashboard-wrapper ${isDarkMode ? 'dark' : ''}`}>
      {/* Sidebar for Desktop */}
      {!isMobile && (
        <Sidebar onToggle={(collapsed) => setIsSidebarCollapsed(collapsed)} />
      )}

      {/* Top Bar for Mobile */}
      {isMobile && (
        <div className="dashboard-top-bar">
          <button
            className="top-bar-back-button"
            onClick={() => navigate('/')}
          >
            <ArrowLeft className="top-bar-back-icon" />
          </button>
          <div className="top-bar-right">
            <button
              className="top-bar-hamburger"
              onClick={() => setShowDropdown(!showDropdown)}
            >
              <Menu className="top-bar-hamburger-icon" />
            </button>
            <img
              src={user?.profileImage || '/default-profile.png'}
              alt={user?.name}
              className="top-bar-profile-image"
            />
            {showDropdown && (
              <div className="dropdown-menu">
                <button
                  onClick={() => {
                    navigate('/dashboard/settings');
                    setShowDropdown(false);
                  }}
                  className="dropdown-item"
                >
                  Settings
                </button>
                <button
                  onClick={handleLogout}
                  className="dropdown-item"
                >
                  Logout
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Main Content */}
      <div
        className={`dashboard-content-wrapper ${
          isMobile ? 'mobile' : isSidebarCollapsed ? 'sidebar-collapsed' : 'sidebar-expanded'
        }`}
      >
        {showWelcome && user && <WelcomeScreen name={user.name} onClose={() => setShowWelcome(false)} />}
        <div className="dashboard-main">
          <Routes>
            <Route path="/" element={<DashboardHome />} />
            <Route path="profile" element={<Profile />} />
            <Route path="upload" element={<Upload />} />
            <Route path="report-retrieve" element={<ReportRetrieve />} />
            <Route path="settings" element={<Settings />} />
            <Route path="report-generated" element={<ReportGenerated />} />
            <Route path="report/:patientId" element={<PatientReport />} />
            <Route path="*" element={<div>404: Route not found in Dashboard</div>} />
          </Routes>
        </div>
      </div>

      {/* Bottom Bar for Mobile */}
      {isMobile && <BottomBar />}
    </div>
  );
}

src -> pages -> Dashboard -> Dashboard.css:
.dashboard-wrapper {
  display: flex;
  min-height: 100vh;
  flex-direction: column; /* Allow bottom bar to stack */
}

.dashboard-content-wrapper {
  flex: 1;
  transition: margin-left 0.3s ease;
}

.dashboard-content-wrapper.sidebar-expanded {
  margin-left: 16rem;
}

.dashboard-content-wrapper.sidebar-collapsed {
  margin-left: 4rem;
}

.dashboard-content-wrapper.mobile {
  margin-left: 0; /* No sidebar on mobile */
  margin-bottom: 4rem; /* Space for bottom nav */
}

.dashboard-main {
  padding: 2rem;
}

/* Top Bar for Mobile */
.dashboard-top-bar {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background: #ffffff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 0.5rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  z-index: 100;
}

.dashboard-wrapper.dark .dashboard-top-bar {
  background: #1f2937;
}

.top-bar-back-button {
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
}

.top-bar-back-icon {
  width: 1.5rem;
  height: 1.5rem;
  color: #2563eb;
}

.top-bar-right {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  position: relative;
}

.top-bar-hamburger {
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
}

.top-bar-hamburger-icon {
  width: 1.5rem;
  height: 1.5rem;
  color: #2563eb;
}

.top-bar-profile-image {
  width: 2rem;
  height: 2rem;
  border-radius: 9999px;
  object-fit: cover;
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  background: #ffffff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border-radius: 0.25rem;
  display: flex;
  flex-direction: column;
  z-index: 101;
}

.dashboard-wrapper.dark .dropdown-menu {
  background: #1f2937;
}

.dropdown-item {
  background: none;
  border: none;
  padding: 0.5rem 1rem;
  text-align: left;
  color: #4b5563;
  cursor: pointer;
}

.dropdown-item:hover {
  background: rgba(255, 255, 255, 0.1);
}

.dashboard-wrapper.dark .dropdown-item {
  color: #d1d5db;
}

/* Bottom Navigation Bar for Mobile */
.bottom-nav {
  display: none;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: #ffffff;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-around;
  padding: 0.5rem 0;
  z-index: 100;
}

.dashboard-wrapper.dark .bottom-nav {
  background: #1f2937;
}

.bottom-nav-item {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0.5rem;
  color: #4b5563;
  text-decoration: none;
}

.bottom-nav-item:hover {
  color: #2563eb;
}

.dashboard-wrapper.dark .bottom-nav-item {
  color: #d1d5db;
}

.bottom-nav-icon {
  width: 1.5rem;
  height: 1.5rem;
}

/* Mobile Adjustments */
@media (max-width: 768px) {
  .dashboard-top-bar {
    display: flex;
  }

  .bottom-nav {
    display: flex;
  }

  .dashboard-content-wrapper.mobile {
    padding-top: 3rem; /* Space for top bar */
  }
}

@media (min-width: 769px) {
  .dashboard-content-wrapper.sidebar-expanded {
    margin-left: 16rem;
  }

  .dashboard-content-wrapper.sidebar-collapsed {
    margin-left: 4rem;
  }
}